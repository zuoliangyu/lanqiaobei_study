C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2024 17:28:03 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* 变量声明区 */
   3          uchar Key_Slow_Down;                 // 按键减速专用变量
   4          uchar Seg_Buf[8] = {10, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示数据存放数组
   5          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};     // 数码管小数点数据存放数组
   6          uchar Seg_Pos;                     // 数码管扫描专用变量
   7          uint Seg_Slow_Down;                  // 数码管减速专用变量
   8          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};       // Led显示数据存放数组
   9          uchar Uart_Slow_Down;                // 串口减速专用变量
  10          uchar Seg_show_mode;                 // 0电压 1频率
  11          uint voltage_value_100x;
  12          uchar DAC_value = 102; // 2*51
  13          uint frequency_value;
  14          uint time_1s;
  15          bit output_mode; // 0固定DAC=2, 1DAC=RB2
  16          bit LED_mode;  // 0开启功能 1关闭功能
  17          bit Seg_mode;  // 0开启数码管 1关闭数码管
  18          /* 键盘处理函数 */
  19          void Key_Proc()
  20          {
  21   1        static uchar Key_Val, Key_Down, Key_Old, Key_Up; // 按键专用变量
  22   1        if (Key_Slow_Down)
  23   1          return;
  24   1        Key_Slow_Down = 1; // 键盘减速程序
  25   1      
  26   1        Key_Val = Key_Read();           // 实时读取键码值
  27   1        Key_Down = Key_Val & (Key_Old ^ Key_Val); // 捕捉按键下降沿
  28   1        Key_Up = ~Key_Val & (Key_Old ^ Key_Val);  // 捕捉按键上降沿
  29   1        Key_Old = Key_Val;              // 辅助扫描变量
  30   1        switch (Key_Down)
  31   1        {
  32   2        case 4:
  33   2          Seg_show_mode = (++Seg_show_mode) % 2;
  34   2          break;
  35   2        case 5:
  36   2          output_mode ^= 1;
  37   2          break;
  38   2        case 6:
  39   2          LED_mode ^= 1;
  40   2          break;
  41   2        case 7:
  42   2          Seg_mode ^= 1;
  43   2          break;
  44   2        }
  45   1      }
  46          /* 信息处理函数 */
  47          void Seg_Proc()
  48          {
  49   1        if (Seg_Slow_Down)
  50   1          return;
  51   1        Seg_Slow_Down = 1; // 数码管减速程序
  52   1      
  53   1        voltage_value_100x = Ad_Read(0x43);
  54   1        if (!output_mode)
C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2024 17:28:03 PAGE 2   

  55   1          DAC_value = voltage_value_100x;
  56   1        else
  57   1          DAC_value = 102;
  58   1        if (!output_mode)
  59   1          Da_Write(DAC_value);
  60   1        else
  61   1          Da_Write(DAC_value);
  62   1        voltage_value_100x = voltage_value_100x * 100 / 51;
  63   1        if (!Seg_mode)
  64   1        {
  65   2          switch (Seg_show_mode)
  66   2          {
  67   3          case 0:
  68   3            /* 电压测量 */
  69   3            Seg_Buf[0] = 11; // U
  70   3            Seg_Buf[1] = Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = 10;
  71   3            Seg_Buf[5] = voltage_value_100x / 100;
  72   3            Seg_Buf[6] = voltage_value_100x / 10 % 10;
  73   3            Seg_Buf[7] = voltage_value_100x % 10;
  74   3            Seg_Point[5] = 1;
  75   3            break;
  76   3          case 1:
  77   3            /* 频率测量 */
  78   3            Seg_Buf[0] = 12; // F
  79   3            Seg_Buf[1] = 10;
  80   3            Seg_Buf[2] = (frequency_value / 100000 == 0) ? 10 : frequency_value / 100000;
  81   3            Seg_Buf[3] = ((frequency_value / 10000 % 10 == 0) && (Seg_Buf[2] == 10)) ? 10 : frequency_value / 10000
             - % 10;
  82   3            Seg_Buf[4] = ((frequency_value / 1000 % 10 == 0) && (Seg_Buf[3] == 10)) ? 10 : frequency_value / 1000 %
             - 10;
  83   3            Seg_Buf[5] = ((frequency_value / 100 % 10 == 0) && (Seg_Buf[4] == 10)) ? 10 : frequency_value / 100 % 1
             -0;
  84   3            Seg_Buf[6] = ((frequency_value / 10 % 10 == 0) && (Seg_Buf[5] == 10)) ? 10 : frequency_value / 10 % 10;
  85   3            Seg_Buf[7] = frequency_value % 10;
  86   3            Seg_Point[5] = 0;
  87   3            break;
  88   3          }
  89   2        }
  90   1        else
  91   1        {
  92   2          uchar i;
  93   2          for (i = 0; i < 8; i++)
  94   2          {
  95   3            Seg_Buf[i] = 10;
  96   3            Seg_Point[i] = 0;
  97   3          }
  98   2        }
  99   1      }
 100          
 101          /* 其他显示函数 */
 102          void Led_Proc()
 103          {
 104   1        if (!LED_mode)
 105   1        {
 106   2          ucLed[0] = (Seg_show_mode == 0);
 107   2          ucLed[1] = (Seg_show_mode == 1);
 108   2          ucLed[2] = ((voltage_value_100x < 250 && voltage_value_100x >= 150) ||
 109   2                (voltage_value_100x >= 350));
 110   2          ucLed[3] = ((frequency_value < 5000 && frequency_value >= 1000) ||
 111   2                frequency_value >= 10000);
 112   2          ucLed[4] = (output_mode);
 113   2        }
C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2024 17:28:03 PAGE 3   

 114   1        else
 115   1        {
 116   2          uchar i;
 117   2          for (i = 0; i < 8; i++)
 118   2          {
 119   3            ucLed[i] = 0;
 120   3          }
 121   2        }
 122   1      }
 123          
 124          // 计数器
 125          void Timer0Init(void) // 0微秒@12.000MHz
 126          {
 127   1        AUXR &= 0x7F; // 定时器时钟12T模式
 128   1        TMOD &= 0xF0; // 设置定时器模式
 129   1        TMOD |= 0x05;
 130   1        TL0 = 0x00; // 设置定时初值
 131   1        TH0 = 0x00; // 设置定时初值
 132   1        TF0 = 0;  // 清除TF0标志
 133   1        TR0 = 1;  // 定时器0开始计时
 134   1      }
 135          // 定时器
 136          void Timer1Init(void) // 1毫秒@12.000MHz
 137          {
 138   1        AUXR &= 0xBF; // 定时器时钟12T模式
 139   1        TMOD &= 0x0F; // 设置定时器模式
 140   1        TL1 = 0x18;   // 设置定时初值
 141   1        TH1 = 0xFC;   // 设置定时初值
 142   1        TF1 = 0;    // 清除TF1标志
 143   1        TR1 = 1;    // 定时器1开始计时
 144   1        ET1 = 1;    // 允许定时器1中断
 145   1        EA = 1;     // 允许总中断
 146   1      }
 147          
 148          /* 定时器1中断服务函数 */
 149          void Timer1Server() interrupt 3
 150          {
 151   1        if (++Key_Slow_Down == 10)
 152   1          Key_Slow_Down = 0; // 键盘减速专用
 153   1        if (++Seg_Slow_Down == 200)
 154   1          Seg_Slow_Down = 0; // 数码管减速专用
 155   1        if (++Seg_Pos == 8)
 156   1          Seg_Pos = 0; // 数码管显示专用
 157   1        if (++time_1s == 1000)
 158   1        {
 159   2          time_1s = 0;
 160   2          frequency_value = TH0 << 8 | TL0;
 161   2          TH0 = TL0 = 0;
 162   2          TF0 = 0;
 163   2        }
 164   1        Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 165   1        Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 166   1      }
 167          
 168          /* Main */
 169          void main()
 170          {
 171   1        System_Init();
 172   1        Timer0Init();
 173   1        Timer1Init();
 174   1      
 175   1        while (1)
C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2024 17:28:03 PAGE 4   

 176   1        {
 177   2          Key_Proc();
 178   2          Seg_Proc();
 179   2          Led_Proc();
 180   2        }
 181   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    840    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     41       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
