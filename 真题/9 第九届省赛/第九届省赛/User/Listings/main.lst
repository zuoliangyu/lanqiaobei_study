C51 COMPILER V9.59.0.0   MAIN                                                              03/06/2024 21:56:43 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Slow_Down;                                // 数码管减速
   7          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   8          uchar Seg_Pos;                                      // 数码管指示
   9          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};      // 某位是否显示小数点
  10          
  11          /* 键盘方面 */
  12          uchar Key_Slow_Down;
  13          
  14          /* 数据 */
  15          
  16          /* 显示 */
  17          uchar Led_show_mode;      // 0 左到右单循环 1 右到左循环 2 .. 3 ..
  18          uint Flow_interval = 400; // 400-1200
  19          uchar Seg_show_mode;      // 0 数码管全灭 1 模式编号设置 2 流转间隔设置
  20          uchar Led_level;          // 0 1 2 3
  21          uchar Led_show_index;     // 显示的数码管的第几对，用于流转12模式直接使用，34模式变换使用
  22          
  23          /* 判断 */
  24          bit Flow_flag;   // 是否开启流转
  25          bit Seg_flicker; // 数码管闪烁
  26          bit Show_level;  // 是否显示等级
  27          uchar Pwm_value;
  28          /* EEPROM数据 */
  29          uchar old_passwd;
  30          uchar passwd = 123;
  31          
  32          /* 时间 */
  33          uint time_800ms;
  34          uint time_flow; // 流转计时
  35          /* 键盘处理函数 */
  36          void Key_Proc()
  37          {
  38   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  39   1          if (Key_Slow_Down)
  40   1              return;
  41   1          Key_Slow_Down = 1;
  42   1      
  43   1          Key_Val = Key_Read();
  44   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  45   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  46   1          Key_Old = Key_Val;
  47   1          if (Key_Down == 7)
  48   1              Flow_flag ^= 1;
  49   1          if (Key_Down == 6)
  50   1              Seg_show_mode = (++Seg_show_mode) % 3;
  51   1          if (Key_Down == 5)
  52   1          {
  53   2              if (Seg_show_mode == 1)
  54   2              {
C51 COMPILER V9.59.0.0   MAIN                                                              03/06/2024 21:56:43 PAGE 2   

  55   3                  Led_show_mode = (Led_show_mode + 1) % 4;
  56   3              }
  57   2              else if (Seg_show_mode == 2)
  58   2              {
  59   3                  Flow_interval = (Flow_interval + 100 > 1200) ? 400 : Flow_interval + 100;
  60   3              }
  61   2          }
  62   1      
  63   1          if (Key_Down == 4)
  64   1          {
  65   2              if (Seg_show_mode == 1)
  66   2              {
  67   3                  Led_show_mode = (Led_show_mode == 0) ? 3 : Led_show_mode - 1;
  68   3              }
  69   2              else if (Seg_show_mode == 2)
  70   2              {
  71   3                  Flow_interval = (Flow_interval - 100 < 400) ? 1200 : Flow_interval - 100;
  72   3              }
  73   2          }
  74   1          if (Seg_show_mode == 0)
  75   1              if (Key_Old == 4)
  76   1              {
  77   2                  Show_level = 1;
  78   2              }
  79   1              // 如果我们没有按下S4
  80   1              else
  81   1              {
  82   2                  Show_level = 0;
  83   2              }
  84   1      }
  85          /* 数码管处理函数 */
  86          void Seg_Proc()
  87          {
  88   1          uchar i;
  89   1          if (Seg_Slow_Down)
  90   1              return;
  91   1          Seg_Slow_Down = 1;
  92   1          Led_level = Ad_Read(0x03) / 64;
  93   1          if (Seg_show_mode == 0)
  94   1          {
  95   2              if (Show_level)
  96   2              {
  97   3                  memset(Seg_Buf, 10, 6);     //
  98   3                  Seg_Buf[6] = 11;            //-
  99   3                  Seg_Buf[7] = Led_level + 1; //
 100   3              }
 101   2              else
 102   2                  memset(Seg_Buf, 10, 8); // 全灭
 103   2          }
 104   1          else
 105   1          {
 106   2              Seg_Buf[0] = 11; //-
 107   2              Seg_Buf[1] = Led_show_mode + 1;
 108   2              Seg_Buf[2] = 11; //-
 109   2              Seg_Buf[3] = 10;
 110   2              Seg_Buf[4] = (Flow_interval / 1000 == 0) ? 10 : Flow_interval / 1000 % 10;
 111   2              Seg_Buf[5] = Flow_interval / 100 % 10;
 112   2              Seg_Buf[6] = Flow_interval / 10 % 10;
 113   2              Seg_Buf[7] = Flow_interval % 10;
 114   2              if (Seg_show_mode == 1)
 115   2              {
 116   3                  for (i = 0; i < 3; i++)
C51 COMPILER V9.59.0.0   MAIN                                                              03/06/2024 21:56:43 PAGE 3   

 117   3                      Seg_Buf[i] = (Seg_flicker) ? Seg_Buf[i] : 10;
 118   3              }
 119   2              else if (Seg_show_mode == 2)
 120   2              {
 121   3                  for (i = 4; i < 8; i++)
 122   3                      Seg_Buf[i] = (Seg_flicker) ? Seg_Buf[i] : 10;
 123   3              }
 124   2          }
 125   1      }
 126          
 127          /* LED处理函数 */
 128          void Led_Proc()
 129          {
 130   1          uchar i;
 131   1          if (3 * (Led_level) > Pwm_value + 1)
 132   1          {
 133   2              if (Flow_flag)
 134   2              {
 135   3                  switch (Led_show_mode)
 136   3                  {
 137   4                  case 0:
 138   4                      for (i = 0; i < 8; i++)
 139   4                          ucLed[i] = (i == Led_show_index);
 140   4                      break;
 141   4                  case 1:
 142   4                      for (i = 0; i < 8; i++)
 143   4                          ucLed[i] = (7 - i == Led_show_index);
 144   4                      break;
 145   4                  case 2:
 146   4                      for (i = 0; i < 4; i++)
 147   4                      {
 148   5                          ucLed[i] = (i == Led_show_index);
 149   5                          ucLed[7 - i] = (i == Led_show_index);
 150   5                      }
 151   4                      break;
 152   4                  case 3:
 153   4                      for (i = 0; i < 4; i++)
 154   4                      {
 155   5                          ucLed[3 - i] = (i == Led_show_index);
 156   5                          ucLed[4 + i] = (i == Led_show_index);
 157   5                      }
 158   4                      break;
 159   4                  }
 160   3              }
 161   2              else
 162   2              {
 163   3                  memset(ucLed, 0, 8);
 164   3              }
 165   2          }
 166   1          else
 167   1          {
 168   2              memset(ucLed, 0, 8);
 169   2          }
 170   1      }
 171          
 172          /* 定时器0中断初始化 */
 173          void Timer0_Init(void) // 1毫秒@12.000MHz
 174          {
 175   1          AUXR &= 0x7F; // 定时器时钟12T模式
 176   1          TMOD &= 0xF0; // 设置定时器模式
 177   1          TL0 = 0x18;   // 设置定时初始值
 178   1          TH0 = 0xFC;   // 设置定时初始值
C51 COMPILER V9.59.0.0   MAIN                                                              03/06/2024 21:56:43 PAGE 4   

 179   1          TF0 = 0;      // 清除TF0标志
 180   1          TR0 = 1;      // 定时器0开始计时
 181   1          ET0 = 1;
 182   1          EA = 1;
 183   1      }
 184          
 185          /* 定时器0中断函数 */
 186          void Timer0_ISR(void) interrupt 1
 187          {
 188   1          if (++Key_Slow_Down == 10)
 189   1              Key_Slow_Down = 0;
 190   1          if (++Seg_Slow_Down == 200)
 191   1              Seg_Slow_Down = 0;
 192   1          if (++Seg_Pos == 8)
 193   1              Seg_Pos = 0;
 194   1          if (++Pwm_value == 12)
 195   1              Pwm_value = 0;
 196   1          if (++time_800ms == 800)
 197   1          {
 198   2              Seg_flicker ^= 1;
 199   2              time_800ms = 0;
 200   2          }
 201   1          if (Flow_flag)
 202   1          {
 203   2              if (++time_flow >= Flow_interval)
 204   2              {
 205   3                  time_flow = 0;
 206   3                  Led_show_index = (++Led_show_index) % 8;
 207   3              }
 208   2          }
 209   1          else
 210   1          {
 211   2              time_flow = 0;
 212   2              Led_show_index = 0;
 213   2          }
 214   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 215   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 216   1      }
 217          
 218          void main()
 219          {
 220   1          System_Init();
 221   1          Timer0_Init();
 222   1      
 223   1          while (1)
 224   1          {
 225   2              Key_Proc();
 226   2              Seg_Proc();
 227   2              Led_Proc();
 228   2          }
 229   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    965    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     44       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   MAIN                                                              03/06/2024 21:56:43 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
