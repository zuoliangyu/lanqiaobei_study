C51 COMPILER V9.59.0.0   MAIN                                                              02/02/2024 22:27:49 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* 变量声明区 */
   3          uchar Key_Slow_Down;                 // 按键减速专用变量
   4          uchar Seg_Buf[8] = {10, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示数据存放数组
   5          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};     // 数码管小数点数据存放数组
   6          uchar Seg_Pos;                     // 数码管扫描专用变量
   7          uint Seg_Slow_Down;                  // 数码管减速专用变量
   8          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};       // Led显示数据存放数组
   9          
  10          uchar Seg_show_mode; // 显示界面 0频率 1湿度 2测距 3参数
  11          uchar celi_mode;   // 参数界面 0频率 1湿度 2距离
  12          /*时间*/
  13          uint time_1s;
  14          uint time_up_1s;
  15          /*测量数据*/
  16          uint freq;
  17          uchar humidity;
  18          uchar distance;
  19          
  20          uint freq_demo = 9000;
  21          uint humidity_demo = 40;
  22          uint dis_demo = 60;
  23          
  24          bit dis_flag;  // 0为cm，1为m
  25          bit freq_flag; // 0为Hz，1为kHz
  26          
  27          bit reset_relay_flag;
  28          void init_Seg_LED() // 初始化数码管和LED
  29          {
  30   1        uchar i;
  31   1        for (i = 0; i < 8; i++)
  32   1        {
  33   2          ucLed[i] = 0;
  34   2          Seg_Buf[i] = 10;
  35   2          Seg_Point[i] = 0;
  36   2        }
  37   1      }
  38          
  39          /* 键盘处理函数 */
  40          void Key_Proc()
  41          {
  42   1        static uchar Key_Val, Key_Down, Key_Old, Key_Up; // 按键专用变量
  43   1        if (Key_Slow_Down)
  44   1          return;
  45   1        Key_Slow_Down = 1; // 键盘减速程序
  46   1      
  47   1        Key_Val = Key_Read();           // 实时读取键码值
  48   1        Key_Down = Key_Val & (Key_Old ^ Key_Val); // 捕捉按键下降沿
  49   1        Key_Up = ~Key_Val & (Key_Old ^ Key_Val);  // 捕捉按键上降沿
  50   1        Key_Old = Key_Val;              // 辅助扫描变量
  51   1        if (Key_Down == 4)
  52   1        {
  53   2          Seg_show_mode = (++Seg_show_mode) % 4;
  54   2          celi_mode = 0;
C51 COMPILER V9.59.0.0   MAIN                                                              02/02/2024 22:27:49 PAGE 2   

  55   2          init_Seg_LED();
  56   2        }
  57   1        if (Seg_show_mode == 3 && Key_Down == 5)
  58   1        {
  59   2          celi_mode = (++celi_mode) % 3;
  60   2          init_Seg_LED();
  61   2        }
  62   1        if (Key_Down == 6)
  63   1        {
  64   2          switch (Seg_show_mode)
  65   2          {
  66   3          case 2:
  67   3            dis_flag ^= 1;
  68   3            Seg_Point[5] = 0;
  69   3            break;
  70   3          case 3:
  71   3            /* 参数设置 */
  72   3            switch (celi_mode)
  73   3            {
  74   4            case 0:
  75   4              /* 频率参数 */
  76   4              freq_demo = (freq_demo + 500 > 12000) ? 1000 : freq_demo + 500;
  77   4              break;
  78   4            case 1:
  79   4              /*湿度参数*/
  80   4              humidity_demo = (humidity_demo + 10 > 60) ? 10 : humidity_demo + 10;
  81   4              break;
  82   4            case 2:
  83   4              /*距离参数*/
  84   4              dis_demo = (dis_demo + 10 > 120) ? 10 : dis_demo + 10;
  85   4              break;
  86   4            }
  87   3            break;
  88   3          }
  89   2        }
  90   1        if (Key_Down == 7)
  91   1        {
  92   2          switch (Seg_show_mode)
  93   2          {
  94   3          case 0:
  95   3            /* 频率显示 */
  96   3            freq_flag ^= 1;
  97   3            Seg_Point[6] = 0;
  98   3            break;
  99   3          case 3:
 100   3            /* 参数设置 */
 101   3            switch (celi_mode)
 102   3            {
 103   4            case 0:
 104   4              /* 频率参数 */
 105   4              freq_demo = (freq_demo - 500 < 1000) ? 12000 : freq_demo - 500;
 106   4              break;
 107   4            case 1:
 108   4              /*湿度参数*/
 109   4              humidity_demo = (humidity_demo - 10 < 10) ? 60 : humidity_demo - 10;
 110   4              break;
 111   4            case 2:
 112   4              /*距离参数*/
 113   4              dis_demo = (dis_demo - 10 < 10) ? 120 : dis_demo - 10;
 114   4              break;
 115   4            }
 116   3            break;
C51 COMPILER V9.59.0.0   MAIN                                                              02/02/2024 22:27:49 PAGE 3   

 117   3          }
 118   2        }
 119   1        if (Key_Down == 7 && Seg_show_mode == 1)
 120   1          reset_relay_flag = 1; // 按下开始计时
 121   1        else
 122   1          reset_relay_flag = 0;
 123   1        // 抬起检测
 124   1        if (Key_Up == 7 && time_up_1s >= 1000)
 125   1          reset_relay_flag = 0;
 126   1      }
 127          
 128          /* 信息处理函数 */
 129          void Seg_Proc()
 130          {
 131   1        uchar temp_freq, i, temp_dis;
 132   1        if (Seg_Slow_Down)
 133   1          return;
 134   1        Seg_Slow_Down = 1; // 数码管减速程序
 135   1        humidity = Ad_Read(0x03) / 51.0 * 20;
 136   1        distance = Ut_Wave_Data();
 137   1        if (humidity > 80)
 138   1          Da_Write(255);
 139   1        else if (humidity < humidity_demo)
 140   1          Da_Write(51);
 141   1        else
 142   1          Da_Write(255 - 204 * (80 - humidity) / (80 - humidity_demo));
 143   1        switch (Seg_show_mode)
 144   1        {
 145   2        case 0:
 146   2          /* 频率显示 */
 147   2          Seg_Buf[0] = 11; // F
 148   2          // KHz
 149   2          if (freq_flag)
 150   2          {
 151   3            temp_freq = freq / 100;
 152   3            Seg_Buf[3] = temp_freq / 10000 % 10;
 153   3            Seg_Buf[4] = temp_freq / 1000 % 10;
 154   3            Seg_Buf[5] = temp_freq / 100 % 10;
 155   3            Seg_Buf[6] = temp_freq / 10 % 10;
 156   3            Seg_Buf[7] = temp_freq % 10;
 157   3            Seg_Point[6] = 1;
 158   3            for (i = 3; i < 6; i++)
 159   3            {
 160   4              if (Seg_Buf[i] == 0)
 161   4                Seg_Buf[i] = 10;
 162   4              else
 163   4                break;
 164   4            }
 165   3          }
 166   2          // Hz
 167   2          else
 168   2          {
 169   3            Seg_Buf[3] = freq / 10000 % 10;
 170   3            Seg_Buf[4] = freq / 1000 % 10;
 171   3            Seg_Buf[5] = freq / 100 % 10;
 172   3            Seg_Buf[6] = freq / 10 % 10;
 173   3            Seg_Buf[7] = freq % 10;
 174   3            for (i = 3; i < 7; i++)
 175   3            {
 176   4              if (Seg_Buf[i] == 0)
 177   4                Seg_Buf[i] = 10;
 178   4              else
C51 COMPILER V9.59.0.0   MAIN                                                              02/02/2024 22:27:49 PAGE 4   

 179   4                break;
 180   4            }
 181   3          }
 182   2          break;
 183   2        case 1:
 184   2          /*湿度显示*/
 185   2          Seg_Buf[0] = 12; // H
 186   2          Seg_Buf[6] = humidity / 10 % 10;
 187   2          Seg_Buf[7] = humidity % 10;
 188   2          break;
 189   2        case 2:
 190   2          /*测距*/
 191   2          Seg_Buf[0] = 13; // A
 192   2          if (dis_flag)
 193   2          {
 194   3            Seg_Buf[5] = distance / 100;
 195   3            Seg_Buf[6] = distance / 10 % 10;
 196   3            Seg_Buf[7] = distance % 10;
 197   3            Seg_Point[5] = 1;
 198   3          }
 199   2          else
 200   2          {
 201   3            Seg_Buf[5] = (distance / 100 == 0) ? 10 : distance / 100;
 202   3            Seg_Buf[6] = distance / 10 % 10;
 203   3            Seg_Buf[7] = distance % 10;
 204   3          }
 205   2      
 206   2          break;
 207   2        case 3:
 208   2          /*参数*/
 209   2          Seg_Buf[0] = 14; // P
 210   2          Seg_Buf[1] = celi_mode + 1;
 211   2          switch (celi_mode)
 212   2          {
 213   3          case 0:
 214   3            /* 频率 */
 215   3            temp_freq = freq_demo / 100;
 216   3            Seg_Buf[5] = (temp_freq / 100 == 0) ? 10 : temp_freq / 100;
 217   3            Seg_Buf[6] = temp_freq / 10 % 10;
 218   3            Seg_Buf[7] = temp_freq % 10;
 219   3            Seg_Point[6] = 1;
 220   3            break;
 221   3          case 1:
 222   3            /* 湿度 */
 223   3            Seg_Buf[6] = humidity_demo / 10;
 224   3            Seg_Buf[7] = humidity_demo % 10;
 225   3            break;
 226   3          case 2:
 227   3            /* 距离 */
 228   3            temp_dis = dis_demo / 10;
 229   3            Seg_Buf[6] = temp_dis / 10;
 230   3            Seg_Buf[7] = temp_dis % 10;
 231   3            Seg_Point[6] = 1;
 232   3            break;
 233   3          }
 234   2          break;
 235   2        }
 236   1      }
 237          
 238          /* 其他显示函数 */
 239          void Led_Proc()
 240          {
C51 COMPILER V9.59.0.0   MAIN                                                              02/02/2024 22:27:49 PAGE 5   

 241   1      }
 242          
 243          /* 定时器0中断初始化函数 */
 244          void Timer0Init(void) // 1毫秒@12.000MHz
 245          {
 246   1        AUXR &= 0x7F; // 定时器时钟12T模式
 247   1        TMOD &= 0xF0; // 设置定时器模式
 248   1        TMOD |= 0x05; // 设置定时器0为16位不重载
 249   1        TL0 = 0;    // 设置定时初始值
 250   1        TH0 = 0;    // 设置定时初始值
 251   1        TF0 = 0;    // 清除TF0标志
 252   1        TR0 = 1;    // 定时器0开始计时
 253   1      }
 254          
 255          void Timer2_Init(void) // 1毫秒@12.000MHz
 256          {
 257   1        AUXR &= 0xFB; // 定时器时钟12T模式
 258   1        T2L = 0x18;   // 设置定时初始值
 259   1        T2H = 0xFC;   // 设置定时初始值
 260   1        AUXR |= 0x10; // 定时器2开始计时
 261   1        IE2 |= 0x04;  // 开定时器2中断
 262   1        EA = 1;     // 总中断打开
 263   1      }
 264          
 265          /* 定时器2中断服务函数 */
 266          void Timer2Server() interrupt 12
 267          {
 268   1        if (++Key_Slow_Down == 10)
 269   1          Key_Slow_Down = 0; // 键盘减速专用
 270   1        if (++Seg_Slow_Down == 500)
 271   1          Seg_Slow_Down = 0; // 数码管减速专用
 272   1        if (++Seg_Pos == 8)
 273   1          Seg_Pos = 0; // 数码管显示专用
 274   1        if (++time_1s == 1000)
 275   1        {
 276   2          freq = TH0 << 8 | TL0;
 277   2          TH0 = 0;
 278   2          TL0 = 0;
 279   2          time_1s = 0;
 280   2        }
 281   1        if (reset_relay_flag)
 282   1        {
 283   2          if (++time_up_1s >= 1000)
 284   2          {
 285   3            time_up_1s = 1000;
 286   3          }
 287   2        }
 288   1        else
 289   1        {
 290   2          time_up_1s = 0;
 291   2        }
 292   1        Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 293   1        Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 294   1      }
 295          
 296          void Delay750ms() //@12MHz
 297          {
 298   1        unsigned char i, j, k;
 299   1      
 300   1        _nop_();
 301   1        _nop_();
 302   1        i = 35;
C51 COMPILER V9.59.0.0   MAIN                                                              02/02/2024 22:27:49 PAGE 6   

 303   1        j = 51;
 304   1        k = 182;
 305   1        do
 306   1        {
 307   2          do
 308   2          {
 309   3            while (--k)
 310   3              ;
 311   3          } while (--j);
 312   2        } while (--i);
 313   1      }
 314          
 315          /* Main */
 316          void main()
 317          {
 318   1        // 如果有温度读取的话
 319   1        rd_temperature();
 320   1        Delay750ms();
 321   1      
 322   1        System_Init();
 323   1        Timer0Init();
 324   1        Timer2_Init();
 325   1        while (1)
 326   1        {
 327   2          Key_Proc();
 328   2          Seg_Proc();
 329   2          Led_Proc();
 330   2        }
 331   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1337    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
