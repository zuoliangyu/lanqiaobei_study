C51 COMPILER V9.59.0.0   MAIN                                                              04/08/2024 17:12:28 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Buf[8] = {10 , 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   7          uchar Seg_Pos;                                      // 数码管指示
   8          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};      // 某位是否显示小数点
   9          
  10          /* 串口方面 */
  11          uchar Uart_Slow_Down;
  12          uchar Uart_Buf[3];   // 串口接收到的数据
  13          uchar Uart_Rx_Index; // 串口接收到的数据的指针
  14          
  15          /* 时间方面 */
  16          uint time_all_1s;
  17          uchar time_100ms;
  18          
  19          /* 界面 */
  20          uchar Seg_show_mode; // 0 温度显示 1 电压显示
  21          
  22          /* 数据 */
  23          uint T_value_10x;  // 10倍温度值
  24          uint V_value_100x; // 100倍电压值
  25          
  26          /* 判断 */
  27          bit Data_send_flag;   // 判断是否应该发送数据
  28          bit Lock_uart_change; // 串口修改页面功能是否锁定
  29          bit Led_blink_flag;   // 闪烁标志
  30          
  31          /* 数据处理函数 */
  32          void Data_Proc()
  33          {
  34   1          if (time_all_1s % 100 == 0)
  35   1          {
  36   2              // AD读取
  37   2              V_value_100x = (float)Ad_Read(0x03) / 51.0 * 100;
  38   2          }
  39   1          if (time_all_1s % 500 == 0)
  40   1          {
  41   2              // 温度读取
  42   2              T_value_10x = rd_temperature() * 10;
  43   2          }
  44   1      }
  45          /* 键盘处理函数 */
  46          void Key_Proc()
  47          {
  48   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  49   1          if (time_all_1s % 10)
  50   1              return;
  51   1          Key_Val = Key_Read();
  52   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  53   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  54   1          Key_Old = Key_Val;
C51 COMPILER V9.59.0.0   MAIN                                                              04/08/2024 17:12:28 PAGE 2   

  55   1          if (Key_Down == 12)
  56   1              Data_send_flag = 1;
  57   1          if (Key_Down == 4)
  58   1              Lock_uart_change = 1;
  59   1          if (Lock_uart_change && Key_Down == 5)
  60   1              Lock_uart_change = 0;
  61   1      }
  62          /* 数码管处理函数 */
  63          void Seg_Proc()
  64          {
  65   1          if (time_all_1s % 20)
  66   1              return;
  67   1          Seg_Buf[0] = 11; // U
  68   1          Seg_Buf[1] = Seg_show_mode + 1;
  69   1          Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = 10;
  70   1          if (Seg_show_mode == 0)
  71   1          {
  72   2              Seg_Point[5] = 0;
  73   2              Seg_Point[6] = 1;
  74   2              Seg_Buf[5] = T_value_10x / 100 % 10;
  75   2              Seg_Buf[6] = T_value_10x / 10 % 10;
  76   2              Seg_Buf[7] = T_value_10x % 10;
  77   2          }
  78   1          else
  79   1          {
  80   2              Seg_Point[5] = 1;
  81   2              Seg_Point[6] = 0;
  82   2              Seg_Buf[5] = V_value_100x / 100 % 10;
  83   2              Seg_Buf[6] = V_value_100x / 10 % 10;
  84   2              Seg_Buf[7] = V_value_100x % 10;
  85   2          }
  86   1      }
  87          
  88          /* LED处理函数 */
  89          void Led_Proc()
  90          {
  91   1          ucLed[0] = (Seg_show_mode == 0);
  92   1          ucLed[1] = (Seg_show_mode == 1);
  93   1          ucLed[2] = Led_blink_flag;
  94   1          Relay(T_value_10x >= 280);
  95   1          Beep(V_value_100x > 360);
  96   1      }
  97          
  98          /* 串口处理函数 */
  99          void Uart_Proc()
 100          {
 101   1          if (time_all_1s % 200)
 102   1              return;
 103   1          if (Data_send_flag)
 104   1          {
 105   2              Data_send_flag = 0;
 106   2              if (Seg_show_mode == 0)
 107   2                  printf("TEMP:%0.1f℃", (float)T_value_10x / 10.0);
 108   2              else
 109   2                  printf("Voltage:%0.2fV", (float)V_value_100x / 100.0);
 110   2          }
 111   1          if (Lock_uart_change == 0)
 112   1          {
 113   2              // 未被锁定
 114   2              if (Uart_Buf[0] == 'A')
 115   2                  Seg_show_mode = 0;
 116   2              if (Uart_Buf[0] == 'B')
C51 COMPILER V9.59.0.0   MAIN                                                              04/08/2024 17:12:28 PAGE 3   

 117   2                  Seg_show_mode = 1;
 118   2              memset(Uart_Buf, 0, 3);
 119   2              Uart_Rx_Index = 0;
 120   2          }
 121   1      }
 122          
 123          /* 定时器0中断初始化 */
 124          void Timer0_Init(void) // 1毫秒@12.000MHz
 125          {
 126   1          AUXR &= 0x7F; // 定时器时钟12T模式
 127   1          TMOD &= 0xF0; // 设置定时器模式
 128   1          TL0 = 0x18;   // 设置定时初始值
 129   1          TH0 = 0xFC;   // 设置定时初始值
 130   1          TF0 = 0;      // 清除TF0标志
 131   1          TR0 = 1;      // 定时器0开始计时
 132   1          ET0 = 1;
 133   1          EA = 1;
 134   1      }
 135          
 136          /* 定时器0中断函数 */
 137          void Timer0_ISR(void) interrupt 1
 138          {
 139   1          if (++time_all_1s == 1000)
 140   1              time_all_1s = 0;
 141   1          if (++Seg_Pos == 8)
 142   1              Seg_Pos = 0;
 143   1          if (Lock_uart_change)
 144   1          {
 145   2              if (++time_100ms == 100)
 146   2              {
 147   3                  time_100ms = 0;
 148   3                  Led_blink_flag ^= 1;
 149   3              }
 150   2          }
 151   1          else
 152   1          {
 153   2              time_100ms = 0;
 154   2              Led_blink_flag = 0;
 155   2          }
 156   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 157   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 158   1      }
 159          
 160          /* 串口中断服务函数 */
 161          void Uart_ISR(void) interrupt 4
 162          {
 163   1          if (RI == 1) // 串口接收到数据
 164   1          {
 165   2              Uart_Buf[Uart_Rx_Index] = SBUF;
 166   2              Uart_Rx_Index++;
 167   2              RI = 0;
 168   2          }
 169   1      }
 170          void Delay750ms(void) //@12.000MHz
 171          {
 172   1          unsigned char data i, j, k;
 173   1      
 174   1          _nop_();
 175   1          _nop_();
 176   1          i = 35;
 177   1          j = 51;
 178   1          k = 182;
C51 COMPILER V9.59.0.0   MAIN                                                              04/08/2024 17:12:28 PAGE 4   

 179   1          do
 180   1          {
 181   2              do
 182   2              {
 183   3                  while (--k)
 184   3                      ;
 185   3              } while (--j);
 186   2          } while (--i);
 187   1      }
 188          void main()
 189          {
 190   1          System_Init();
 191   1          Timer0_Init();
 192   1          Uart1_Init();
 193   1          rd_temperature();
 194   1          Delay750ms();
 195   1          T_value_10x = rd_temperature() * 10;
 196   1          Delay750ms();
 197   1          while (1)
 198   1          {
 199   2              Key_Proc();
 200   2              Data_Proc();
 201   2              Seg_Proc();
 202   2              Uart_Proc();
 203   2              Led_Proc();
 204   2          }
 205   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    777    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     42    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
