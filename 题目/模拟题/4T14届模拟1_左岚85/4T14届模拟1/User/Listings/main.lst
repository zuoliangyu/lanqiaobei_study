C51 COMPILER V9.59.0.0   MAIN                                                              04/10/2024 13:57:11 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   7          uchar Seg_Pos;                                      // 数码管指示
   8          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};      // 某位是否显示小数点
   9          
  10          /* 串口方面 */
  11          uchar Uart_Buf[10];  // 串口接收到的数据
  12          uchar Uart_Rx_Index; // 串口接收到的数据的指针
  13          
  14          /* 时间方面 */
  15          uint time_all_1s;
  16          uchar Sys_Tick;
  17          uchar time_100ms;
  18          /* 判断 */
  19          bit Uart_Flag;
  20          bit Wring_Flag;
  21          bit Led_Blink_Flag;
  22          /* 显示 */
  23          uchar Seg_show_mode; // 0 噪音分贝 1 参数显示
  24          /* 数据 */
  25          uint Noise_Value_10x;
  26          uchar Noise_Para = 65;
  27          /* 键盘处理函数 */
  28          void Key_Proc()
  29          {
  30   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  31   1          if (time_all_1s % 10)
  32   1              return;
  33   1          Key_Val = Key_Read();
  34   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  35   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  36   1          Key_Old = Key_Val;
  37   1          if (Key_Down == 12)
  38   1              Seg_show_mode = (++Seg_show_mode) % 2;
  39   1          if (Seg_show_mode == 1)
  40   1          {
  41   2              if (Key_Down == 16)
  42   2                  Noise_Para = (Noise_Para == 90) ? 0 : Noise_Para + 5;
  43   2              else if (Key_Down == 17)
  44   2                  Noise_Para = (Noise_Para == 0) ? 90 : Noise_Para - 5;
  45   2          }
  46   1      }
  47          /* 数码管处理函数 */
  48          void Seg_Proc()
  49          {
  50   1          if (time_all_1s % 50)
  51   1              return;
  52   1          Noise_Value_10x = Ad_Read(0x03) * 180 / 51;
  53   1          Wring_Flag = Noise_Value_10x > Noise_Para * 10;
  54   1      
C51 COMPILER V9.59.0.0   MAIN                                                              04/10/2024 13:57:11 PAGE 2   

  55   1          Seg_Buf[0] = 11; // U
  56   1          Seg_Buf[1] = Seg_show_mode + 1;
  57   1          switch (Seg_show_mode)
  58   1          {
  59   2          case 0:
  60   2              /* 噪音分贝显示 */
  61   2              Seg_Point[6] = 1;
  62   2              Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = 10;
  63   2              Seg_Buf[5] = (Noise_Value_10x / 100 % 10 == 0) ? 10
  64   2                                                             : Noise_Value_10x / 100 % 10;
  65   2              Seg_Buf[6] = Noise_Value_10x / 10 % 10;
  66   2              Seg_Buf[7] = Noise_Value_10x % 10;
  67   2              break;
  68   2      
  69   2          case 1:
  70   2              /* 分贝参数 */
  71   2              Seg_Point[6] = 0;
  72   2              Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = Seg_Buf[5] = 10;
  73   2              Seg_Buf[6] = (Noise_Para / 10 % 10 == 0) ? 10
  74   2                                                       : Noise_Para / 10 % 10;
  75   2              Seg_Buf[7] = Noise_Para % 10;
  76   2              break;
  77   2          }
  78   1      }
  79          
  80          /* LED处理函数 */
  81          void Led_Proc()
  82          {
  83   1          ucLed[0] = (Seg_show_mode == 0);
  84   1          ucLed[1] = (Seg_show_mode == 1);
  85   1          ucLed[7] = Led_Blink_Flag;
  86   1      }
  87          
  88          /* 串口处理函数 */
  89          void Uart_Proc()
  90          {
  91   1          if (Uart_Rx_Index == 0)
  92   1              // 没有接收到任何数据
  93   1              return;
  94   1          if (Sys_Tick >= 10)
  95   1          {
  96   2              Sys_Tick = Uart_Flag = 0;
  97   2              if (Seg_show_mode == 0)
  98   2              {
  99   3                  if (Uart_Buf[0] == 'R' && Uart_Buf[1] == 'e' && Uart_Buf[2] == 't' &&
 100   3                      Uart_Buf[3] == 'u' && Uart_Buf[4] == 'r' && Uart_Buf[5] == 'n')
 101   3                      printf("Noises:%0.1fdB", (float)Noise_Value_10x / 10.0);
 102   3              }
 103   2              memset(Uart_Buf, 0, Uart_Rx_Index);
 104   2              Uart_Rx_Index = 0;
 105   2          }
 106   1      }
 107          
 108          /* 定时器0中断初始化 */
 109          void Timer0_Init(void) // 1毫秒@12.000MHz
 110          {
 111   1          AUXR &= 0x7F; // 定时器时钟12T模式
 112   1          TMOD &= 0xF0; // 设置定时器模式
 113   1          TL0 = 0x18;   // 设置定时初始值
 114   1          TH0 = 0xFC;   // 设置定时初始值
 115   1          TF0 = 0;      // 清除TF0标志
 116   1          TR0 = 1;      // 定时器0开始计时
C51 COMPILER V9.59.0.0   MAIN                                                              04/10/2024 13:57:11 PAGE 3   

 117   1          ET0 = 1;
 118   1          EA = 1;
 119   1      }
 120          
 121          /* 定时器0中断函数 */
 122          void Timer0_ISR(void) interrupt 1
 123          {
 124   1          if (++time_all_1s == 1000)
 125   1              time_all_1s = 0;
 126   1          if (++Seg_Pos == 8)
 127   1              Seg_Pos = 0;
 128   1          if (Uart_Flag)
 129   1              Sys_Tick++;
 130   1          if (Wring_Flag)
 131   1          {
 132   2              if (++time_100ms == 100)
 133   2              {
 134   3                  time_100ms = 0;
 135   3                  Led_Blink_Flag ^= 1;
 136   3              }
 137   2          }
 138   1          else
 139   1          {
 140   2              time_100ms = 0;
 141   2              Led_Blink_Flag = 0;
 142   2          }
 143   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 144   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 145   1      }
 146          
 147          /* 串口中断服务函数 */
 148          void Uart_ISR(void) interrupt 4
 149          {
 150   1          if (RI == 1) // 串口接收到数据
 151   1          {
 152   2              Uart_Flag = 1;
 153   2              Sys_Tick = 0;
 154   2              Uart_Buf[Uart_Rx_Index] = SBUF;
 155   2              Uart_Rx_Index++;
 156   2              RI = 0;
 157   2          }
 158   1          if (Uart_Rx_Index > 10)
 159   1              Uart_Rx_Index = 0;
 160   1      }
 161          void main()
 162          {
 163   1          System_Init();
 164   1          Timer0_Init();
 165   1          Uart1_Init();
 166   1      
 167   1          while (1)
 168   1          {
 169   2              Key_Proc();
 170   2              Seg_Proc();
 171   2              Uart_Proc();
 172   2              Led_Proc();
 173   2          }
 174   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    699    ----
C51 COMPILER V9.59.0.0   MAIN                                                              04/10/2024 13:57:11 PAGE 4   

   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
