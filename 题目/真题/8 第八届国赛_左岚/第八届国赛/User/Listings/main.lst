C51 COMPILER V9.59.0.0   MAIN                                                              04/12/2024 14:41:49 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Slow_Down;                                 // 数码管减速
   7          uchar Seg_Buf[8] = {10, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   8          uchar Seg_Pos;                                       // 数码管指示
   9          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};       // 某位是否显示小数点
  10          
  11          /* 键盘方面 */
  12          uchar Key_Slow_Down;
  13          
  14          /* 时间方面 */
  15          uint time_all_1s;
  16          uchar time_200ms;
  17          /* 数据 */
  18          uchar Dis_Data[16] = {0}; // 存储数组，这里直接虚构跑一波
  19          uchar Dis_show_index;     // 显示数组下标
  20          uchar Dis_Data_index;     // 存储数组下标
  21          uchar Dis_new, Dis_old;   // 这一次和上一次测量的结果
  22          uchar Blind_area;         // 测量盲区
  23          uchar Led_blink_cnt;      // 闪烁计数
  24          /* 显示 */
  25          uchar Seg_show_mode; // 0 测距显示 1 回显 2 参数设置
  26          /* 判断 */
  27          bit Led_blink_start; // 是否开始闪烁
  28          bit Led_blink_flag;  // 闪烁标志位
  29          bit Work_mode;       // 0 上一次 1 这一次+上一次
  30          /* 键盘处理函数 */
  31          void Key_Proc()
  32          {
  33   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  34   1          uint DA_out = 0;
  35   1          if (time_all_1s % 10)
  36   1              return;
  37   1          Key_Val = Key_Read();
  38   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  39   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  40   1          Key_Old = Key_Val;
  41   1          switch (Seg_show_mode)
  42   1          {
  43   2          case 0:
  44   2              /* 测距界面 */
  45   2              if (Key_Down == 4)
  46   2              {
  47   3                  Led_blink_start = 1;
  48   3                  Dis_new = Ut_Wave_Data();
  49   3                  Dis_Data[Dis_Data_index] = Dis_new;
  50   3                  Dis_Data[14] = Dis_Data_index;
  51   3                  if (Dis_Data_index == 0)
  52   3                      Dis_old = Dis_Data[9];
  53   3                  else
  54   3                      Dis_old = Dis_Data[Dis_Data_index - 1];
C51 COMPILER V9.59.0.0   MAIN                                                              04/12/2024 14:41:49 PAGE 2   

  55   3                  Dis_Data_index = (++Dis_Data_index) % 10; // 0-9
  56   3                  EEPROM_Write(Dis_Data, 0, 8);
  57   3                  EEPROM_Write(Dis_Data + 8, 8, 8);
  58   3                  if (Dis_new < Blind_area)
  59   3                      DA_out = 0;
  60   3                  else
  61   3                      DA_out = (Dis_new - Blind_area) * 51 * 0.02;
  62   3                  if (DA_out >= 255)
  63   3                      DA_out = 255;
  64   3                  Da_Write(DA_out);
  65   3              }
  66   2              if (Key_Down == 7)
  67   2                  Work_mode ^= 1;
  68   2              if (Key_Down == 5)
  69   2                  // 切换回显
  70   2                  Seg_show_mode = 1;
  71   2              if (Key_Down == 6)
  72   2                  // 切换参数
  73   2                  Seg_show_mode = 2;
  74   2              break;
  75   2      
  76   2          case 1:
  77   2              /* 回显界面 */
  78   2              if (Key_Down == 5)
  79   2                  // 切换测距
  80   2                  Seg_show_mode = 0;
  81   2              if (Key_Down == 7)
  82   2                  // 翻页
  83   2                  Dis_show_index = (++Dis_show_index) % 10;
  84   2              break;
  85   2          case 2:
  86   2              /* 参数设置界面 */
  87   2              if (Key_Down == 6)
  88   2              {
  89   3                  // 切换测距
  90   3                  Seg_show_mode = 0;
  91   3                  Dis_Data[15] = Blind_area;
  92   3                  EEPROM_Write(Dis_Data + 8, 8, 8);
  93   3              }
  94   2              if (Key_Down == 7)
  95   2                  // 循环添加
  96   2                  Blind_area = (Blind_area == 90) ? 0 : Blind_area + 10;
  97   2              break;
  98   2          }
  99   1      }
 100          /* 数码管处理函数 */
 101          void Seg_Proc()
 102          {
 103   1          uint Work_data = 0;
 104   1      
 105   1          if (time_all_1s % 20)
 106   1              return;
 107   1          switch (Seg_show_mode)
 108   1          {
 109   2          case 0:
 110   2              /* 测距界面 */
 111   2              Seg_Buf[0] = Work_mode;
 112   2              Seg_Buf[1] = 10;
 113   2              if (Work_mode)
 114   2                  Work_data = Dis_old + Dis_new;
 115   2              else
 116   2                  Work_data = Dis_old;
C51 COMPILER V9.59.0.0   MAIN                                                              04/12/2024 14:41:49 PAGE 3   

 117   2              Seg_Buf[2] = (Work_data / 100 % 10 == 0) ? 10
 118   2                                                       : Work_data / 100 % 10;
 119   2              Seg_Buf[3] = (Work_data / 10 % 10 == 0 &&
 120   2                            Seg_Buf[2] == 10)
 121   2                               ? 10
 122   2                               : Work_data / 10 % 10;
 123   2              Seg_Buf[4] = Work_data % 10;
 124   2              Seg_Buf[5] = Dis_new / 100 % 10;
 125   2              Seg_Buf[6] = Dis_new / 10 % 10;
 126   2              Seg_Buf[7] = Dis_new % 10;
 127   2              break;
 128   2      
 129   2          case 1:
 130   2              /* 回显界面 */
 131   2              Seg_Buf[0] = (Dis_show_index + 1) / 10 % 10;
 132   2              Seg_Buf[1] = (Dis_show_index + 1) % 10;
 133   2              Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = 10;
 134   2              Seg_Buf[5] = Dis_Data[Dis_show_index] / 100 % 10;
 135   2              Seg_Buf[6] = Dis_Data[Dis_show_index] / 10 % 10;
 136   2              Seg_Buf[7] = Dis_Data[Dis_show_index] % 10;
 137   2              break;
 138   2          case 2:
 139   2              /* 参数设置 */
 140   2              Seg_Buf[0] = 11; // F
 141   2              Seg_Buf[1] = Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = 10;
 142   2              Seg_Buf[5] = (Blind_area / 100 % 10 == 0) ? 10
 143   2                                                        : Blind_area / 100 % 10;
 144   2              Seg_Buf[6] = (Blind_area / 10 % 10 == 0 &&
 145   2                            Seg_Buf[5] == 10)
 146   2                               ? 10
 147   2                               : Blind_area / 10 % 10;
 148   2              Seg_Buf[7] = Blind_area % 10;
 149   2              break;
 150   2          }
 151   1      }
 152          
 153          /* LED处理函数 */
 154          void Led_Proc()
 155          {
 156   1      
 157   1          ucLed[0] = Led_blink_flag;
 158   1          ucLed[6] = (Seg_show_mode == 2);
 159   1          ucLed[7] = (Seg_show_mode == 1);
 160   1      }
 161          
 162          /* 定时器0中断初始化 */
 163          void Timer0_Init(void) // 1毫秒@12.000MHz
 164          {
 165   1          AUXR &= 0x7F; // 定时器时钟12T模式
 166   1          TMOD &= 0xF0; // 设置定时器模式
 167   1          TL0 = 0x18;   // 设置定时初始值
 168   1          TH0 = 0xFC;   // 设置定时初始值
 169   1          TF0 = 0;      // 清除TF0标志
 170   1          TR0 = 1;      // 定时器0开始计时
 171   1          ET0 = 1;
 172   1          EA = 1;
 173   1      }
 174          
 175          /* 定时器0中断函数 */
 176          void Timer0_ISR(void) interrupt 1
 177          {
 178   1          if (++time_all_1s == 1000)
C51 COMPILER V9.59.0.0   MAIN                                                              04/12/2024 14:41:49 PAGE 4   

 179   1              time_all_1s = 0;
 180   1          if (++Seg_Pos == 8)
 181   1              Seg_Pos = 0;
 182   1          if (Led_blink_start)
 183   1          {
 184   2              if (++time_200ms == 200)
 185   2              {
 186   3                  time_200ms = 0;
 187   3                  Led_blink_flag ^= 1;
 188   3                  Led_blink_cnt++;
 189   3              }
 190   2              if (Led_blink_cnt == 20)
 191   2                  Led_blink_start = 0; // 停止闪烁
 192   2          }
 193   1          else
 194   1          {
 195   2              time_200ms = 0;
 196   2              Led_blink_cnt = 0;
 197   2              Led_blink_flag = 0;
 198   2          }
 199   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 200   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 201   1      }
 202          
 203          uchar passwd = 123;
 204          uchar input_passwd;
 205          void main()
 206          {
 207   1          System_Init();
 208   1          Timer0_Init();
 209   1          EEPROM_Read(&input_passwd, 16, 1);
 210   1          if (input_passwd != passwd) // 校验失败，之前未写入数据1/256概率出问题
 211   1          {
 212   2              EEPROM_Write(&passwd, 16, 1);
 213   2          }
 214   1          else // 校验通过，读取我们需要的数据
 215   1          {
 216   2              EEPROM_Read(Dis_Data, 0, 8);
 217   2              EEPROM_Read(Dis_Data + 8, 8, 8);
 218   2              Blind_area = Dis_Data[15];
 219   2              Dis_Data_index = Dis_Data[14];
 220   2              Dis_old = Dis_Data[Dis_Data_index];
 221   2          }
 222   1      
 223   1          while (1)
 224   1          {
 225   2              Key_Proc();
 226   2              Seg_Proc();
 227   2              Led_Proc();
 228   2          }
 229   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    975    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     59       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   MAIN                                                              04/12/2024 14:41:49 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
