C51 COMPILER V9.59.0.0   MAIN                                                              03/05/2024 08:31:44 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* 变量声明区 */
   3          uchar Key_Slow_Down;                 // 按键减速专用变量
   4          uchar Seg_Buf[8] = {10, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示数据存放数组
   5          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};     // 数码管小数点数据存放数组
   6          uchar Seg_Pos;                     // 数码管扫描专用变量
   7          uint Seg_Slow_Down;                  // 数码管减速专用变量
   8          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};       // Led显示数据存放数组
   9          
  10          /* 数据显示 */
  11          uchar Seg_show_mode; // 0数据 1参数 2计数
  12          
  13          uint old_vol;       // 上一次的电压值
  14          uchar vol_demo;       // 参考电压0-50
  15          unsigned long count_down; // 下降沿计数
  16          bit count_down_flag;    // 下降沿计数标志位
  17          /* 时间 */
  18          uint time_5s;
  19          
  20          uchar error_count;
  21          
  22          /* 键盘处理函数 */
  23          void Key_Proc()
  24          {
  25   1        static uchar Key_Val, Key_Down, Key_Old, Key_Up; // 按键专用变量
  26   1        if (Key_Slow_Down)
  27   1          return;
  28   1        Key_Slow_Down = 1; // 键盘减速程序
  29   1      
  30   1        Key_Val = Key_Read();           // 实时读取键码值
  31   1        Key_Down = Key_Val & (Key_Old ^ Key_Val); // 捕捉按键下降沿
  32   1        Key_Up = ~Key_Val & (Key_Old ^ Key_Val);  // 捕捉按键上降沿
  33   1        Key_Old = Key_Val;              // 辅助扫描变量
  34   1        switch (Key_Down)
  35   1        {
  36   2        case 12:
  37   2          if (Seg_show_mode == 0)
  38   2          {
  39   3            EEPROM_Write(&vol_demo, 0, 1);
  40   3          }
  41   2          Seg_show_mode = (++Seg_show_mode) % 3;
  42   2          error_count = 0;
  43   2          break;
  44   2        case 16:
  45   2          if (Seg_show_mode == 1)
  46   2            vol_demo = (vol_demo + 5 > 50 ? 0 : vol_demo + 5);
  47   2          error_count = 0;
  48   2          break;
  49   2        case 17:
  50   2          if (Seg_show_mode == 1)
  51   2            vol_demo = (vol_demo - 5 < 0 ? 50 : vol_demo - 5);
  52   2          error_count = 0;
  53   2          break;
  54   2        case 13:
C51 COMPILER V9.59.0.0   MAIN                                                              03/05/2024 08:31:44 PAGE 2   

  55   2          if (Seg_show_mode == 2)
  56   2            count_down = 0;
  57   2          error_count = 0;
  58   2          break;
  59   2        case 0:
  60   2          // 空载，用于防止down默认的0造成影响
  61   2          break;
  62   2        default:
  63   2          error_count = (++error_count >= 3) ? 3 : error_count;
  64   2          break;
  65   2        }
  66   1      }
  67          
  68          /* 信息处理函数 */
  69          void Seg_Proc()
  70          {
  71   1        uint real_V;
  72   1        if (Seg_Slow_Down)
  73   1          return;
  74   1        Seg_Slow_Down = 1; // 数码管减速程序
  75   1        switch (Seg_show_mode)
  76   1        {
  77   2        case 0:
  78   2          /* 数据显示 */
  79   2          Seg_Buf[0] = 11;           // U
  80   2          real_V = Ad_Read(0x03) * 100 / 51; // 0-255->0-500
  81   2          // 当检测到下降沿的时候计数+1
  82   2          if (old_vol > vol_demo * 10 && real_V < vol_demo * 10)
  83   2            count_down++;
  84   2          if (real_V < vol_demo * 10)
  85   2            count_down_flag = 1;
  86   2          else
  87   2            count_down_flag = 0;
  88   2          old_vol = real_V;
  89   2          Seg_Buf[5] = real_V / 100 % 10; // 百位
  90   2          Seg_Buf[6] = real_V % 100 / 10; // 十位
  91   2          Seg_Buf[7] = real_V % 10;   // 个位
  92   2          Seg_Point[5] = 1;
  93   2          break;
  94   2      
  95   2        case 1:
  96   2          /*参数设置*/
  97   2          Seg_Buf[0] = 12;          // P
  98   2          Seg_Buf[5] = vol_demo / 100 % 10; // 百位
  99   2          Seg_Buf[6] = vol_demo / 10 % 10;  // 十位
 100   2          Seg_Buf[7] = vol_demo % 10;     // 个位
 101   2          Seg_Point[5] = 1;
 102   2          break;
 103   2        case 2:
 104   2          /*计数界面*/
 105   2          Seg_Buf[0] = 13; // N
 106   2          Seg_Buf[1] = count_down / 10000000 % 10;
 107   2          Seg_Buf[2] = count_down / 1000000 % 10;
 108   2          Seg_Buf[3] = count_down / 100000 % 10;
 109   2          Seg_Buf[4] = count_down / 10000 % 10;
 110   2          Seg_Buf[5] = count_down / 1000 % 10;
 111   2          Seg_Buf[6] = count_down / 100 % 10;
 112   2          Seg_Buf[7] = count_down % 10;
 113   2          break;
 114   2        }
 115   1      }
 116          
C51 COMPILER V9.59.0.0   MAIN                                                              03/05/2024 08:31:44 PAGE 3   

 117          /* 其他显示函数 */
 118          void Led_Proc()
 119          {
 120   1        ucLed[0] = (time_5s >= 5000);
 121   1        ucLed[1] = (count_down % 2);
 122   1        ucLed[2] = (error_count >= 3);
 123   1      }
 124          
 125          /* 定时器0中断初始化函数 */
 126          void Timer0Init(void) // 1毫秒@12.000MHz
 127          {
 128   1        AUXR &= 0x7F; // 定时器时钟12T模式
 129   1        TMOD &= 0xF0; // 设置定时器模式
 130   1        TL0 = 0x18;   // 设置定时初始值
 131   1        TH0 = 0xFC;   // 设置定时初始值
 132   1        TF0 = 0;    // 清除TF0标志
 133   1        TR0 = 1;    // 定时器0开始计时
 134   1        ET0 = 1;    // 定时器中断0打开
 135   1        EA = 1;     // 总中断打开
 136   1      }
 137          
 138          /* 定时器0中断服务函数 */
 139          void Timer0Server() interrupt 1
 140          {
 141   1        if (++Key_Slow_Down == 10)
 142   1          Key_Slow_Down = 0; // 键盘减速专用
 143   1        if (++Seg_Slow_Down == 500)
 144   1          Seg_Slow_Down = 0; // 数码管减速专用
 145   1        if (++Seg_Pos == 8)
 146   1          Seg_Pos = 0; // 数码管显示专用
 147   1        if (count_down_flag)
 148   1        {
 149   2          if (++time_5s >= 5000)
 150   2            time_5s = 5000;
 151   2        }
 152   1        else
 153   1          time_5s = 0;
 154   1        Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 155   1        Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 156   1      }
 157          
 158          void Delay750ms() //@12MHz
 159          {
 160   1        unsigned char i, j, k;
 161   1      
 162   1        _nop_();
 163   1        _nop_();
 164   1        i = 35;
 165   1        j = 51;
 166   1        k = 182;
 167   1        do
 168   1        {
 169   2          do
 170   2          {
 171   3            while (--k)
 172   3              ;
 173   3          } while (--j);
 174   2        } while (--i);
 175   1      }
 176          
 177          /* Main */
 178          void main()
C51 COMPILER V9.59.0.0   MAIN                                                              03/05/2024 08:31:44 PAGE 4   

 179          {
 180   1        // 如果有温度读取的话
 181   1        rd_temperature();
 182   1        Delay750ms();
 183   1      
 184   1        System_Init();
 185   1        Timer0Init();
 186   1        EEPROM_Read(&vol_demo, 0, 1);
 187   1        while (1)
 188   1        {
 189   2          Key_Proc();
 190   2          Seg_Proc();
 191   2          Led_Proc();
 192   2        }
 193   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    932    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
