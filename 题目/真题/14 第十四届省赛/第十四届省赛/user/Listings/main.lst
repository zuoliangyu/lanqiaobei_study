C51 COMPILER V9.59.0.0   MAIN                                                              03/19/2024 17:03:05 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\driver;..\user) DEBUG OBJECTEX
                    -TEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          /* 变量 */
   4          /* 键盘方面 */
   5          uchar Key_Slow_Down;
   6          
   7          /* LED 方面*/
   8          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   9          /* 数码管方面 */
  10          uint Seg_Slow_Down;
  11          uchar Seg_Pos;
  12          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10};
  13          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  14          
  15          /* 时间 */
  16          uchar ucRtc[3] = {0x11, 0x59, 0x56};
  17          uint time_1s;
  18          uint time_2s;
  19          uint time_3s;
  20          uchar time_100ms;
  21          /* 界面 */
  22          uchar Seg_show_mode; // 0 时间 1 回显 2 参数
  23          uchar re_show_mode;  // 0 温度 1 湿度 2 时间
  24          
  25          /* 数据 */
  26          uchar max_temperature;       // 最大温度
  27          uint aver_temperature_10x;   // 平均温度
  28          uint old_temperature_10x;    // 上一次的温度
  29          uchar max_humidity;          // 最大湿度
  30          uint aver_humidity_10x;      // 平均湿度
  31          uint old_humidity_10x;       // 上一次的湿度
  32          uchar trigger_count;         // 触发次数
  33          uchar trigger_time[3];       // 触发时间
  34          uchar para_temperature = 30; // 温度参数
  35          uint freq;
  36          
  37          /* 相关判断参数 */
  38          uchar old_light_value;   // 上一次的光强参数
  39          bit trigger_flag;        // 触发标志
  40          bit long_press_flag;     // 长按标志
  41          bit wring_flag;          // 温度超过参数报警
  42          bit Led_light_flag;      // 闪烁
  43          bit error_humidity_flag; // 湿度是否有效，无效为1
  44          bit data_up;             // 温湿度均升高
  45          
  46          /* 函数 */
  47          /* 清空数据 */
  48          void Clear_Data(void)
  49          {
  50   1          uchar i;
  51   1          max_temperature = 0;      // 最大温度
  52   1          aver_temperature_10x = 0; // 平均温度
  53   1          max_humidity = 0;         // 最大湿度
  54   1          aver_humidity_10x = 0;    // 平均湿度
C51 COMPILER V9.59.0.0   MAIN                                                              03/19/2024 17:03:05 PAGE 2   

  55   1          trigger_count = 0;        // 触发次数
  56   1          for (i = 0; i < 3; i++)
  57   1              trigger_time[i] = 0; // 触发时间
  58   1      }
  59          /* 数码管复位 */
  60          void Seg_Reset(void)
  61          {
  62   1          uchar i;
  63   1          for (i = 0; i < 8; i++)
  64   1          {
  65   2              Seg_Buf[i] = 10;
  66   2              Seg_Point[i] = 0;
  67   2          }
  68   1      }
  69          /* 湿度计算 */
  70          float rd_humidity(void)
  71          {
  72   1          float humidity_value;
  73   1          if (freq < 200 || freq > 2000)
  74   1              return 0;
  75   1          humidity_value = (freq - 200) * 2 / 45 + 10;
  76   1          return humidity_value;
  77   1      }
  78          
  79          /* 键盘处理 */
  80          void Key_Porc(void)
  81          {
  82   1          static uchar Key_Val, Key_Down, Key_Old, Key_Up;
  83   1          if (Key_Slow_Down)
  84   1              return;
  85   1          Key_Slow_Down = 1;
  86   1      
  87   1          Key_Val = Key_Read();
  88   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  89   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  90   1          Key_Old = Key_Val;
  91   1      
  92   1          if (Key_Down == 4)
  93   1          {
  94   2              Seg_Reset();
  95   2              Seg_show_mode = (++Seg_show_mode) % 3;
  96   2              re_show_mode = 0;
  97   2          }
  98   1          if (Seg_show_mode == 1 && Key_Down == 5)
  99   1          {
 100   2              Seg_Reset();
 101   2              re_show_mode = (++re_show_mode) % 3;
 102   2          }
 103   1          if (Seg_show_mode == 2)
 104   1          {
 105   2              if (Key_Down == 8)
 106   2                  para_temperature = (++para_temperature > 99) ? 99 : para_temperature;
 107   2              else if (Key_Down == 9)
 108   2                  para_temperature = (--para_temperature < 0) ? 0 : para_temperature;
 109   2          }
 110   1          if (Seg_show_mode == 1 && re_show_mode == 2)
 111   1          {
 112   2              if (Key_Down == 9)
 113   2              {
 114   3                  long_press_flag = 1;
 115   3              }
 116   2              if (Key_Up == 9)
C51 COMPILER V9.59.0.0   MAIN                                                              03/19/2024 17:03:05 PAGE 3   

 117   2              {
 118   3                  if (time_2s >= 2000)
 119   3                      Clear_Data();
 120   3                  long_press_flag = 0;
 121   3              }
 122   2          }
 123   1      }
 124          
 125          /* 数码管处理 */
 126          void Seg_Porc(void)
 127          {
 128   1          uint temp_temperature_10x, temp_humidity_10x;
 129   1          uchar temp_light;
 130   1          if (Seg_Slow_Down)
 131   1              return;
 132   1          Seg_Slow_Down = 1;
 133   1          temp_light = Ad_Read(0x01);
 134   1          // 避免重复触发
 135   1          if ((old_light_value > 50) &&
 136   1              (temp_light < 50) &&
 137   1              (trigger_flag == 0))
 138   1          {
 139   2              trigger_flag = 1;
 140   2              if (++trigger_count == 100)
 141   2                  trigger_count = 99;
 142   2          }
 143   1      
 144   1          // 被触发，并且到达3s
 145   1          else if (trigger_flag == 1 && time_3s >= 3000)
 146   1              trigger_flag = 0;
 147   1          old_light_value = temp_light;
 148   1          if (trigger_flag)
 149   1          {
 150   2      
 151   2              Seg_Buf[1] = Seg_Buf[2] = 10;
 152   2              Seg_Point[6] = 0;
 153   2              /* 温湿度界面 */
 154   2              Seg_Buf[0] = 16; // E
 155   2              temp_temperature_10x = rd_temperature() * 10;
 156   2              temp_humidity_10x = rd_humidity() * 10;
 157   2              Seg_Buf[3] = temp_temperature_10x / 100 % 10;
 158   2              Seg_Buf[4] = temp_temperature_10x / 10 % 10;
 159   2              Seg_Buf[5] = 11; //-
 160   2              // 无效数据
 161   2              if (temp_humidity_10x == 0)
 162   2              {
 163   3                  trigger_count--;
 164   3                  error_humidity_flag = 1;
 165   3                  Seg_Buf[6] = 17; // A
 166   3                  Seg_Buf[7] = 17; // A
 167   3              }
 168   2              // 有效数据
 169   2              else
 170   2              {
 171   3                  Read_Rtc(trigger_time);
 172   3                  error_humidity_flag = 0; // 数据有效
 173   3                  wring_flag = (temp_temperature_10x > para_temperature * 10);
 174   3                  if ((trigger_count >= 2) &&
 175   3                      (temp_humidity_10x > old_humidity_10x) &&
 176   3                      (temp_temperature_10x > old_temperature_10x))
 177   3                      data_up = 1;
 178   3                  else
C51 COMPILER V9.59.0.0   MAIN                                                              03/19/2024 17:03:05 PAGE 4   

 179   3                      data_up = 0;
 180   3                  old_humidity_10x = temp_humidity_10x;
 181   3                  old_temperature_10x = temp_temperature_10x;
 182   3                  Seg_Buf[6] = temp_humidity_10x / 100 % 10;
 183   3                  Seg_Buf[7] = temp_humidity_10x / 10 % 10;
 184   3                  max_temperature = (max_temperature > temp_temperature_10x) ? max_temperature : temp_temperatur
             -e_10x;
 185   3                  max_humidity = (max_humidity > temp_humidity_10x) ? max_humidity : temp_humidity_10x;
 186   3                  aver_temperature_10x = (aver_temperature_10x * (trigger_count - 1) + temp_temperature_10x) / (
             -trigger_count);
 187   3                  aver_humidity_10x = (aver_humidity_10x * (trigger_count - 1) + temp_humidity_10x) / (trigger_c
             -ount);
 188   3              }
 189   2          }
 190   1          else
 191   1          {
 192   2              switch (Seg_show_mode)
 193   2              {
 194   3              case 0:
 195   3                  /* 时间 */
 196   3                  Read_Rtc(ucRtc);
 197   3                  Seg_Buf[0] = ucRtc[0] / 16;
 198   3                  Seg_Buf[1] = ucRtc[0] % 16;
 199   3                  Seg_Buf[2] = 11; //-
 200   3                  Seg_Buf[3] = ucRtc[1] / 16;
 201   3                  Seg_Buf[4] = ucRtc[1] % 16;
 202   3                  Seg_Buf[5] = 11; //-
 203   3                  Seg_Buf[6] = ucRtc[2] / 16;
 204   3                  Seg_Buf[7] = ucRtc[2] % 16;
 205   3                  break;
 206   3              case 1:
 207   3                  /* 回显 */
 208   3                  switch (re_show_mode)
 209   3                  {
 210   4                  case 0:
 211   4                      /* 温度 */
 212   4                      Seg_Buf[0] = 12; // C
 213   4                      if (trigger_count != 0)
 214   4                      {
 215   5                          Seg_Buf[2] = max_temperature / 10 % 10;
 216   5                          Seg_Buf[3] = max_temperature % 10;
 217   5                          Seg_Buf[4] = 11; //-
 218   5                          Seg_Buf[5] = aver_temperature_10x / 100 % 10;
 219   5                          Seg_Buf[6] = aver_temperature_10x / 10 % 10;
 220   5                          Seg_Buf[7] = aver_temperature_10x % 10;
 221   5                          Seg_Point[6] = 1;
 222   5                      }
 223   4                      break;
 224   4                  case 1:
 225   4                      /* 湿度 */
 226   4                      Seg_Buf[0] = 13; // H
 227   4                      if (trigger_count != 0)
 228   4                      {
 229   5                          Seg_Buf[2] = max_humidity / 10 % 10;
 230   5                          Seg_Buf[3] = max_humidity % 10;
 231   5                          Seg_Buf[4] = 11; //-
 232   5                          Seg_Buf[5] = aver_humidity_10x / 100 % 10;
 233   5                          Seg_Buf[6] = aver_humidity_10x / 10 % 10;
 234   5                          Seg_Buf[7] = aver_humidity_10x % 10;
 235   5                          Seg_Point[6] = 1;
 236   5                      }
 237   4                      break;
C51 COMPILER V9.59.0.0   MAIN                                                              03/19/2024 17:03:05 PAGE 5   

 238   4                  case 2:
 239   4                      /* 时间 */
 240   4                      Seg_Buf[0] = 14; // F
 241   4                      Seg_Buf[1] = trigger_count / 10 % 10;
 242   4                      Seg_Buf[2] = trigger_count % 10;
 243   4                      if (trigger_count != 0)
 244   4                      {
 245   5                          Seg_Buf[3] = trigger_time[0] / 16;
 246   5                          Seg_Buf[4] = trigger_time[0] % 16;
 247   5                          Seg_Buf[5] = 11; //-
 248   5                          Seg_Buf[6] = trigger_time[1] / 16;
 249   5                          Seg_Buf[7] = trigger_time[1] % 16;
 250   5                      }
 251   4                      break;
 252   4                  }
 253   3                  break;
 254   3              case 2:
 255   3                  /* 参数 */
 256   3                  Seg_Buf[0] = 15; // P
 257   3                  Seg_Buf[6] = para_temperature / 10 % 10;
 258   3                  Seg_Buf[7] = para_temperature % 10;
 259   3                  break;
 260   3              }
 261   2          }
 262   1      }
 263          
 264          /* LED处理 */
 265          void Led_Porc(void)
 266          {
 267   1          /* 界面 */
 268   1          ucLed[0] = (Seg_show_mode == 0);
 269   1          ucLed[1] = (Seg_show_mode == 1);
 270   1          ucLed[2] = (Seg_show_mode == 2);
 271   1          /* 报警 */
 272   1          ucLed[3] = (wring_flag) ? Led_light_flag : 0;
 273   1          ucLed[4] = error_humidity_flag;
 274   1          ucLed[5] = data_up;
 275   1      }
 276          
 277          /* 定时器/计数器部分 */
 278          /* 计数器 */
 279          void Timer0_Init(void) // 1毫秒@12.000MHz
 280          {
 281   1          AUXR &= 0x7F; // 定时器时钟12T模式
 282   1          TMOD &= 0xF0; // 设置定时器模式
 283   1          TMOD |= 0x05; // 设置定时器模式
 284   1          TL0 = 0;      // 设置定时初始值
 285   1          TH0 = 0;      // 设置定时初始值
 286   1          TF0 = 0;      // 清除TF0标志
 287   1          TR0 = 1;      // 定时器0开始计时
 288   1      }
 289          /* 定时器 */
 290          void Timer1_Init(void) // 1毫秒@12.000MHz
 291          {
 292   1          AUXR &= 0xBF; // 定时器时钟12T模式
 293   1          TMOD &= 0x0F; // 设置定时器模式
 294   1          TL1 = 0x18;   // 设置定时初始值
 295   1          TH1 = 0xFC;   // 设置定时初始值
 296   1          TF1 = 0;      // 清除TF1标志
 297   1          TR1 = 1;      // 定时器1开始计时
 298   1          ET1 = 1;      // 允许定时器1中断
 299   1          EA = 1;       // 允许总中断
C51 COMPILER V9.59.0.0   MAIN                                                              03/19/2024 17:03:05 PAGE 6   

 300   1      }
 301          /* 定时器服务函数 */
 302          void Timer1_ISR(void) interrupt 3
 303          {
 304   1          if (++Key_Slow_Down == 10)
 305   1              Key_Slow_Down = 0;
 306   1          if (++Seg_Slow_Down == 200)
 307   1              Seg_Slow_Down = 0;
 308   1          if (++Seg_Pos == 8)
 309   1              Seg_Pos = 0;
 310   1          if (++time_1s == 1000)
 311   1          {
 312   2              time_1s = 0;
 313   2              freq = TH0 << 8 | TL0;
 314   2              TH0 = 0;
 315   2              TL0 = 0;
 316   2          }
 317   1          if (trigger_flag)
 318   1          {
 319   2              if (++time_3s >= 3000)
 320   2              {
 321   3                  time_3s = 3001;
 322   3              }
 323   2          }
 324   1          else
 325   1              time_3s = 0;
 326   1          // 开始长按计时
 327   1          if (long_press_flag)
 328   1          {
 329   2              if (++time_2s >= 2000)
 330   2              {
 331   3                  time_2s = 2001;
 332   3              }
 333   2          }
 334   1          else
 335   1              time_2s = 0;
 336   1          // 处于报警
 337   1      
 338   1          if (++time_100ms == 100)
 339   1          {
 340   2              time_100ms = 0;
 341   2              Led_light_flag ^= 1;
 342   2          }
 343   1      
 344   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 345   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 346   1      }
 347          void Delay750ms(void) //@12.000MHz
 348          {
 349   1          unsigned char data i, j, k;
 350   1      
 351   1          _nop_();
 352   1          _nop_();
 353   1          i = 35;
 354   1          j = 51;
 355   1          k = 182;
 356   1          do
 357   1          {
 358   2              do
 359   2              {
 360   3                  while (--k)
 361   3                      ;
C51 COMPILER V9.59.0.0   MAIN                                                              03/19/2024 17:03:05 PAGE 7   

 362   3              } while (--j);
 363   2          } while (--i);
 364   1      }
 365          
 366          void main()
 367          {
 368   1      
 369   1          System_Init();
 370   1          Timer0_Init();
 371   1          Timer1_Init();
 372   1          Set_Rtc(ucRtc);
 373   1          Delay750ms();
 374   1          rd_temperature();
 375   1          while (1)
 376   1          {
 377   2              Key_Porc();
 378   2              Seg_Porc();
 379   2              Led_Porc();
 380   2          }
 381   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1496    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     62       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
