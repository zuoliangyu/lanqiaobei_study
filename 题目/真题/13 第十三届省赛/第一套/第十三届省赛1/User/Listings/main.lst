C51 COMPILER V9.59.0.0   MAIN                                                              03/04/2024 18:56:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Slow_Down;                                // 数码管减速
   7          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   8          uchar Seg_Pos;                                      // 数码管指示
   9          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};      // 某位是否显示小数点
  10          
  11          /* 时间方面 */
  12          uchar ucRtc[3] = {0x13, 0x11, 0x11}; // 初始化时间13:11:11
  13          
  14          /* 键盘方面 */
  15          uchar Key_Slow_Down;
  16          
  17          /* 显示与控制 */
  18          uchar Seg_show_mode;  // 0 温度 1 时间 2 参数
  19          bit Control_mode;     // 控制模式 0 温度 1 时间
  20          bit Time_show_mode;   // 时间显示模式 0 时分 1 分秒
  21          bit Temperature_mode; // 温度控制点亮
  22          bit Time_mode;        // 时间控制点亮
  23          bit Time_Led;         // 整点点亮
  24          bit Led_show;         // 闪烁
  25          /* 数据 */
  26          uint Temperature_value_10x;  // 温度测量值 10倍
  27          uchar Temperature_para = 23; // 温度参数
  28          
  29          /* 时间 */
  30          uint time_5s;
  31          uint time_5s_led;
  32          uchar time_100ms;
  33          
  34          /* 键盘处理函数 */
  35          void Key_Proc()
  36          {
  37   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  38   1          if (Key_Slow_Down)
  39   1              return;
  40   1          Key_Slow_Down = 1;
  41   1      
  42   1          Key_Val = Key_Read();
  43   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  44   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  45   1          Key_Old = Key_Val;
  46   1          if (Key_Down == 12)
  47   1              Seg_show_mode = (++Seg_show_mode) % 3;
  48   1          if (Key_Down == 13)
  49   1              Control_mode ^= 1;
  50   1          if (Seg_show_mode == 2)
  51   1          {
  52   2              if (Key_Down == 16)
  53   2                  Temperature_para = (++Temperature_para > 99) ? 99 : Temperature_para;
  54   2              if (Key_Down == 17)
C51 COMPILER V9.59.0.0   MAIN                                                              03/04/2024 18:56:10 PAGE 2   

  55   2                  Temperature_para = (--Temperature_para < 10) ? 10 : Temperature_para;
  56   2          }
  57   1          if (Seg_show_mode == 2)
  58   1          {
  59   2              if (Key_Old == 17)
  60   2                  Time_show_mode = 1;
  61   2              if (Key_Up == 17)
  62   2                  Time_show_mode = 0;
  63   2          }
  64   1      }
  65          /* 数码管处理函数 */
  66          void Seg_Proc()
  67          {
  68   1          if (Seg_Slow_Down)
  69   1              return;
  70   1          Seg_Slow_Down = 1;
  71   1          Seg_Buf[0] = 11; // U
  72   1          Seg_Buf[1] = Seg_show_mode + 1;
  73   1          Read_Rtc(ucRtc);
  74   1          Temperature_value_10x = rd_temperature() * 10;
  75   1          switch (Seg_show_mode)
  76   1          {
  77   2          case 0:
  78   2              /* 温度 */
  79   2              Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = 10;
  80   2              Seg_Buf[5] = Temperature_value_10x / 100 % 10;
  81   2              Seg_Buf[6] = Temperature_value_10x / 10 % 10;
  82   2              Seg_Buf[7] = Temperature_value_10x % 10;
  83   2              Seg_Point[6] = 1;
  84   2              break;
  85   2          case 1:
  86   2              /* 时间 */
  87   2      
  88   2              Seg_Buf[2] = 10;
  89   2              Seg_Buf[3] = Time_show_mode ? ucRtc[1] / 16 : ucRtc[0] / 16;
  90   2              Seg_Buf[4] = Time_show_mode ? ucRtc[1] % 16 : ucRtc[0] % 16;
  91   2              Seg_Buf[5] = 12; //-
  92   2              Seg_Buf[6] = Time_show_mode ? ucRtc[2] / 16 : ucRtc[1] / 16;
  93   2              Seg_Buf[7] = Time_show_mode ? ucRtc[2] % 16 : ucRtc[1] % 16;
  94   2              Seg_Point[6] = 0;
  95   2              break;
  96   2          case 2:
  97   2              /* 参数 */
  98   2              Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = Seg_Buf[5] = 10;
  99   2              Seg_Buf[6] = Temperature_para / 10 % 10;
 100   2              Seg_Buf[7] = Temperature_para % 10;
 101   2              Seg_Point[6] = 0;
 102   2              break;
 103   2          }
 104   1      }
 105          
 106          /* LED处理函数 */
 107          void Led_Proc()
 108          {
 109   1          // 时间控制
 110   1          if (Control_mode)
 111   1          {
 112   2              Temperature_mode = 0; // 关闭温度报警，避免突然切换导致bug
 113   2              // 当分和秒同时是0x00的时候
 114   2              if ((ucRtc[1] || ucRtc[2]) == 0)
 115   2                  Time_mode = 1; // 开启整点状态
 116   2          }
C51 COMPILER V9.59.0.0   MAIN                                                              03/04/2024 18:56:10 PAGE 3   

 117   1          // 温度控制
 118   1          else
 119   1          {
 120   2              Time_mode = 0; // 关闭整点状态，避免突然切换导致bug
 121   2              if (Temperature_value_10x >= Temperature_para * 10)
 122   2                  Temperature_mode = 1; // 温度报警
 123   2              else
 124   2                  Temperature_mode = 0; // 温度正常
 125   2          }
 126   1          Relay(Temperature_mode || Time_mode); // 处于温度报警或整点状态的时候吸合
 127   1      
 128   1          // 当分和秒同时是0x00的时候
 129   1          if ((ucRtc[1] || ucRtc[2]) == 0)
 130   1              Time_Led = 1;
 131   1          ucLed[0] = Time_Led; // LED整点亮5s
 132   1          ucLed[1] = (Control_mode == 0);
 133   1          ucLed[2] = Led_show;
 134   1      }
 135          
 136          /* 定时器0中断初始化 */
 137          void Timer0_Init(void) // 1毫秒@12.000MHz
 138          {
 139   1          AUXR &= 0x7F; // 定时器时钟12T模式
 140   1          TMOD &= 0xF0; // 设置定时器模式
 141   1          TL0 = 0x18;   // 设置定时初始值
 142   1          TH0 = 0xFC;   // 设置定时初始值
 143   1          TF0 = 0;      // 清除TF0标志
 144   1          TR0 = 1;      // 定时器0开始计时
 145   1          ET0 = 1;
 146   1          EA = 1;
 147   1      }
 148          
 149          /* 定时器0中断函数 */
 150          void Timer0_ISR(void) interrupt 1
 151          {
 152   1          if (++Key_Slow_Down == 10)
 153   1              Key_Slow_Down = 0;
 154   1          if (++Seg_Slow_Down == 500)
 155   1              Seg_Slow_Down = 0;
 156   1          if (++Seg_Pos == 8)
 157   1              Seg_Pos = 0;
 158   1          if (Time_mode)
 159   1          {
 160   2              if (++time_5s == 5000)
 161   2              {
 162   3                  time_5s = 0;
 163   3                  Time_mode = 0;
 164   3              }
 165   2          }
 166   1          // 当时间没有控制的时候，锁死定时器为0
 167   1          else
 168   1          {
 169   2              time_5s = 0;
 170   2          }
 171   1      
 172   1          if (Time_Led)
 173   1          {
 174   2              if (++time_5s_led == 5000)
 175   2              {
 176   3                  time_5s_led = 0;
 177   3                  Time_mode = 0;
 178   3              }
C51 COMPILER V9.59.0.0   MAIN                                                              03/04/2024 18:56:10 PAGE 4   

 179   2          }
 180   1      
 181   1          if (Temperature_mode || Time_mode)
 182   1          {
 183   2              if (++time_100ms == 100)
 184   2              {
 185   3                  time_100ms = 0;
 186   3                  Led_show ^= 1;
 187   3              }
 188   2          }
 189   1          else
 190   1          {
 191   2              time_100ms = 0;
 192   2              Led_show = 0;
 193   2          }
 194   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 195   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 196   1      }
 197          
 198          void Delay750ms(void) //@12.000MHz
 199          {
 200   1          unsigned char data i, j, k;
 201   1      
 202   1          _nop_();
 203   1          _nop_();
 204   1          i = 35;
 205   1          j = 51;
 206   1          k = 182;
 207   1          do
 208   1          {
 209   2              do
 210   2              {
 211   3                  while (--k)
 212   3                      ;
 213   3              } while (--j);
 214   2          } while (--i);
 215   1      }
 216          void main()
 217          {
 218   1          System_Init();
 219   1          Timer0_Init();
 220   1          Set_Rtc(ucRtc);
 221   1          Delay750ms();
 222   1          rd_temperature();
 223   1          while (1)
 224   1          {
 225   2              Key_Proc();
 226   2              Seg_Proc();
 227   2              Led_Proc();
 228   2          }
 229   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    786    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   MAIN                                                              03/04/2024 18:56:10 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
