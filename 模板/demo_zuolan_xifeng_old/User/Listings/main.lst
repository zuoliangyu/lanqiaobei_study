C51 COMPILER V9.59.0.0   MAIN                                                              02/19/2024 19:53:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* 变量声明区 */
   3          uchar Key_Slow_Down;                 // 按键减速专用变量
   4          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示数据存放数组
   5          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};     // 数码管小数点数据存放数组
   6          uchar Seg_Pos;                     // 数码管扫描专用变量
   7          uint Seg_Slow_Down;                  // 数码管减速专用变量
   8          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};       // Led显示数据存放数组
   9          uchar Uart_Slow_Down;                // 串口减速专用变量
  10          uchar Uart_Recv[10];                 // 串口接收数据储存数组 默认10个字节 若接收数据较长 可更改最大字节数
  11          uchar Uart_Recv_Index;                 // 串口接收数组指针
  12          uchar ucRtc[3] = {0x11, 0x59, 0x56};         // 时间存放
  13          /* 键盘处理函数 */
  14          void Key_Proc()
  15          {
  16   1        static uchar Key_Val, Key_Down, Key_Old, Key_Up; // 按键专用变量
  17   1        if (Key_Slow_Down)
  18   1          return;
  19   1        Key_Slow_Down = 1; // 键盘减速程序
  20   1      
  21   1        Key_Val = Key_Read();           // 实时读取键码值
  22   1        Key_Down = Key_Val & (Key_Old ^ Key_Val); // 捕捉按键下降沿
  23   1        Key_Up = ~Key_Val & (Key_Old ^ Key_Val);  // 捕捉按键上降沿
  24   1        Key_Old = Key_Val;              // 辅助扫描变量
  25   1      }
  26          
  27          /* 信息处理函数 */
  28          void Seg_Proc()
  29          {
  30   1        if (Seg_Slow_Down)
  31   1          return;
  32   1        Seg_Slow_Down = 1; // 数码管减速程序
  33   1      }
  34          
  35          /* 其他显示函数 */
  36          void Led_Proc()
  37          {
  38   1      }
  39          
  40          /* 串口处理函数 */
  41          void Uart_Proc()
  42          {
  43   1        if (Uart_Slow_Down)
  44   1          return;
  45   1        Uart_Slow_Down = 1; // 串口减速程序
  46   1      }
  47          
  48          /* 定时器0中断初始化函数 */
  49          void Timer0Init(void) // 1毫秒@12.000MHz
  50          {
  51   1        AUXR &= 0x7F; // 定时器时钟12T模式
  52   1        TMOD &= 0xF0; // 设置定时器模式
  53   1        TL0 = 0x18;   // 设置定时初始值
  54   1        TH0 = 0xFC;   // 设置定时初始值
C51 COMPILER V9.59.0.0   MAIN                                                              02/19/2024 19:53:38 PAGE 2   

  55   1        TF0 = 0;    // 清除TF0标志
  56   1        TR0 = 1;    // 定时器0开始计时
  57   1        ET0 = 1;    // 定时器中断0打开
  58   1        EA = 1;     // 总中断打开
  59   1      }
  60          
  61          /* 定时器0中断服务函数 */
  62          void Timer0Server() interrupt 1
  63          {
  64   1        if (++Key_Slow_Down == 10)
  65   1          Key_Slow_Down = 0; // 键盘减速专用
  66   1        if (++Seg_Slow_Down == 500)
  67   1          Seg_Slow_Down = 0; // 数码管减速专用
  68   1        if (++Uart_Slow_Down == 200)
  69   1          Uart_Slow_Down = 0; // 串口减速专用
  70   1        if (++Seg_Pos == 8)
  71   1          Seg_Pos = 0; // 数码管显示专用
  72   1        Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
  73   1        Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
  74   1      }
  75          
  76          /* 串口1中断服务函数 */
  77          void Uart1Server() interrupt 4
  78          {
  79   1        if (RI == 1) // 串口接收数据
  80   1        {
  81   2          Uart_Recv[Uart_Recv_Index] = SBUF;
  82   2          Uart_Recv_Index++;
  83   2          RI = 0;
  84   2        }
  85   1      }
  86          void Delay750ms() //@12MHz
  87          {
  88   1        unsigned char i, j, k;
  89   1      
  90   1        _nop_();
  91   1        _nop_();
  92   1        i = 35;
  93   1        j = 51;
  94   1        k = 182;
  95   1        do
  96   1        {
  97   2          do
  98   2          {
  99   3            while (--k)
 100   3              ;
 101   3          } while (--j);
 102   2        } while (--i);
 103   1      }
 104          
 105          /* Main */
 106          void main()
 107          {
 108   1        // 如果有温度读取的话
 109   1        rd_temperature();
 110   1        Delay750ms();
 111   1      
 112   1        System_Init();
 113   1        Timer0Init();
 114   1        UartInit();
 115   1        Set_Rtc(ucRtc);
 116   1        while (1)
C51 COMPILER V9.59.0.0   MAIN                                                              02/19/2024 19:53:38 PAGE 3   

 117   1        {
 118   2          Key_Proc();
 119   2          Seg_Proc();
 120   2          Led_Proc();
 121   2          Uart_Proc();
 122   2        }
 123   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    302    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
