C51 COMPILER V9.59.0.0   IIC                                                               04/09/2024 11:25:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Objects\iic.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Driver\iic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\iic.lst) TABS(2) OBJECT(.\Objects\iic.obj)

line level    source

   1          /*  #   I2C代码片段说明
   2            1.  本文件夹中提供的驱动代码供参赛选手完成程序设计参考。
   3            2.  参赛选手可以自行编写相关代码或以该代码为基础，根据所选单片机类型、运行速度和试题
   4              中对单片机时钟频率的要求，进行代码调试和修改。
   5          */
   6          #include "iic.h"
   7          #include "intrins.h"
   8          #define DELAY_TIME 10
   9          sbit scl = P2 ^ 0;
  10          sbit sda = P2 ^ 1;
  11          //
  12          static void I2C_Delay(unsigned char n)
  13          {
  14   1        do
  15   1        {
  16   2          _nop_();
  17   2          _nop_();
  18   2          _nop_();
  19   2          _nop_();
  20   2          _nop_();
  21   2          _nop_();
  22   2          _nop_();
  23   2          _nop_();
  24   2          _nop_();
  25   2          _nop_();
  26   2          _nop_();
  27   2          _nop_();
  28   2          _nop_();
  29   2          _nop_();
  30   2          _nop_();
  31   2        } while (n--);
  32   1      }
  33          
  34          //
  35          void I2CStart(void)
  36          {
  37   1        sda = 1;
  38   1        scl = 1;
  39   1        I2C_Delay(DELAY_TIME);
  40   1        sda = 0;
  41   1        I2C_Delay(DELAY_TIME);
  42   1        scl = 0;
  43   1      }
  44          
  45          //
  46          void I2CStop(void)
  47          {
  48   1        sda = 0;
  49   1        scl = 1;
  50   1        I2C_Delay(DELAY_TIME);
  51   1        sda = 1;
  52   1        I2C_Delay(DELAY_TIME);
  53   1      }
  54          
C51 COMPILER V9.59.0.0   IIC                                                               04/09/2024 11:25:31 PAGE 2   

  55          //
  56          void I2CSendByte(unsigned char byt)
  57          {
  58   1        unsigned char i;
  59   1      
  60   1        for (i = 0; i < 8; i++)
  61   1        {
  62   2          scl = 0;
  63   2          I2C_Delay(DELAY_TIME);
  64   2          if (byt & 0x80)
  65   2          {
  66   3            sda = 1;
  67   3          }
  68   2          else
  69   2          {
  70   3            sda = 0;
  71   3          }
  72   2          I2C_Delay(DELAY_TIME);
  73   2          scl = 1;
  74   2          byt <<= 1;
  75   2          I2C_Delay(DELAY_TIME);
  76   2        }
  77   1      
  78   1        scl = 0;
  79   1      }
  80          
  81          //
  82          unsigned char I2CReceiveByte(void)
  83          {
  84   1        unsigned char da;
  85   1        unsigned char i;
  86   1        for (i = 0; i < 8; i++)
  87   1        {
  88   2          scl = 1;
  89   2          I2C_Delay(DELAY_TIME);
  90   2          da <<= 1;
  91   2          if (sda)
  92   2            da |= 0x01;
  93   2          scl = 0;
  94   2          I2C_Delay(DELAY_TIME);
  95   2        }
  96   1        return da;
  97   1      }
  98          
  99          //
 100          unsigned char I2CWaitAck(void)
 101          {
 102   1        unsigned char ackbit;
 103   1      
 104   1        scl = 1;
 105   1        I2C_Delay(DELAY_TIME);
 106   1        ackbit = sda;
 107   1        scl = 0;
 108   1        I2C_Delay(DELAY_TIME);
 109   1      
 110   1        return ackbit;
 111   1      }
 112          
 113          //
 114          void I2CSendAck(unsigned char ackbit)
 115          {
 116   1        scl = 0;
C51 COMPILER V9.59.0.0   IIC                                                               04/09/2024 11:25:31 PAGE 3   

 117   1        sda = ackbit;
 118   1        I2C_Delay(DELAY_TIME);
 119   1        scl = 1;
 120   1        I2C_Delay(DELAY_TIME);
 121   1        scl = 0;
 122   1        sda = 1;
 123   1        I2C_Delay(DELAY_TIME);
 124   1      }
 125          
 126          unsigned char Ad_Read(unsigned char addr)
 127          {
 128   1        unsigned char temp;
 129   1        I2CStart();
 130   1        I2CSendByte(0x90);
 131   1        I2CWaitAck();
 132   1        I2CSendByte(addr);
 133   1        I2CWaitAck();
 134   1        I2CStart();
 135   1        I2CSendByte(0x91);
 136   1        I2CWaitAck();
 137   1        temp = I2CReceiveByte();
 138   1        I2CSendAck(1);
 139   1        I2CStop();
 140   1        return temp;
 141   1      }
 142          
 143          void Da_Write(unsigned char dat)
 144          {
 145   1        I2CStart();
 146   1        I2CSendByte(0x90);
 147   1        I2CWaitAck();
 148   1        I2CSendByte(0x41);
 149   1        I2CWaitAck();
 150   1        I2CSendByte(dat);
 151   1        I2CWaitAck();
 152   1        I2CStop();
 153   1      }
 154          
 155          // 函数名：写EEPROM函数
 156          // 入口参数：需要写入的字符串，写入的地址(务必为8的倍数)，写入数量
 157          // 返回值：无
 158          // 函数功能：向EERPOM的某个地址写入字符串中特定数量的字符。
 159          void EEPROM_Write(unsigned char *EEPROM_String, unsigned char addr, unsigned char num)
 160          {
 161   1        I2CStart();      // 发送开启信号
 162   1        I2CSendByte(0xA0); // 选择EEPROM芯片，确定写的模式
 163   1        I2CWaitAck();    // 等待EEPROM反馈
 164   1      
 165   1        I2CSendByte(addr); // 写入要存储的数据地址
 166   1        I2CWaitAck();    // 等待EEPROM反馈
 167   1      
 168   1        while (num--)
 169   1        {
 170   2          I2CSendByte(*EEPROM_String++); // 将要写入的信息写入
 171   2          I2CWaitAck();          // 等待EEPROM反馈
 172   2          I2C_Delay(200);
 173   2        }
 174   1        I2CStop(); // 停止发送
 175   1      }
 176          
 177          // 函数名：读EEPROM函数
 178          // 入口参数：读到的数据需要存储的字符串，读取的地址(务必为8的倍数)，读取的数量
C51 COMPILER V9.59.0.0   IIC                                                               04/09/2024 11:25:31 PAGE 4   

 179          // 返回值：无
 180          // 函数功能：读取EERPOM的某个地址中的数据，并存放在字符串数组中。
 181          void EEPROM_Read(unsigned char *EEPROM_String, unsigned char addr, unsigned char num)
 182          {
 183   1        I2CStart();      // 发送开启信号
 184   1        I2CSendByte(0xA0); // 选择EEPROM芯片，确定写的模式
 185   1        I2CWaitAck();    // 等待EEPROM反馈
 186   1      
 187   1        I2CSendByte(addr); // 写入要读取的数据地址
 188   1        I2CWaitAck();    // 等待EEPROM反馈
 189   1      
 190   1        I2CStart();      // 发送开启信号
 191   1        I2CSendByte(0xA1); // 选择EEPROM芯片，确定读的模式
 192   1        I2CWaitAck();    // 等待EEPROM反馈
 193   1      
 194   1        while (num--)
 195   1        {
 196   2          *EEPROM_String++ = I2CReceiveByte(); // 将要写入的信息写入
 197   2          if (num)
 198   2            I2CSendAck(0); // 发送应答
 199   2          else
 200   2            I2CSendAck(1); // 不应答
 201   2        }
 202   1      
 203   1        I2CStop(); // 停止发送
 204   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    378    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
