C51 COMPILER V9.59.0.0   MAIN                                                              05/19/2024 20:54:51 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          /* LED显示 */
   4          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   5          
   6          /* 数码管显示 */
   7          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10};  // 数码管显示的值
   8          uchar Seg_Pos;                                       // 数码管指示
   9          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // 某位是否显示小数点
  10          
  11          /* 串口方面 */
  12          uchar Uart_Buf[20];   // 串口接收到的数据
  13          uchar Uart_Rx_Index;  // 串口接收到的数据的指针
  14          bit Uart_flag;        // 是否接收到信息
  15          uchar Sys_Tick;       // 嘀嗒计时，超时解析
  16          
  17          /* 时间方面 */
  18          uchar ucRtc[3] = {0x13, 0x11, 0x11};  // 初始化时间13:11:11
  19          
  20          /* 时间方面 */
  21          uint time_all_1s;
  22          /* 数据 */
  23          uint int_data;  // 整数数据
  24          
  25          #define N 10
  26          uint data_array[N];  // 窗口大小
  27          uint sum_temp;       // 总和
  28          uchar index_temp;    // 计数
  29          uchar arr_count;     // 数组数据数量
  30          
  31          uint filter(uint new_data) {
  32   1        sum_temp -= data_array[index_temp];
  33   1        data_array[index_temp] = new_data;
  34   1        sum_temp += data_array[index_temp];
  35   1        index_temp = (++index_temp) % N;  // 保证index_temp在0~N-1之间轮转
  36   1        arr_count = (++arr_count == N + 1) ? N : arr_count;  // 锁定数组中的元素个数
  37   1        return sum_temp / arr_count;
  38   1      }
  39          /* 数据处理函数 */
  40          void Data_Proc() {
  41   1        if (time_all_1s % 50 == 0) {
  42   2          // 时间读取
  43   2        }
  44   1        if (time_all_1s % 100 == 0) {
  45   2          // AD读取
  46   2        }
  47   1        if (time_all_1s % 500 == 0) {
  48   2          // 温度读取
  49   2        }
  50   1      }
  51          /* 键盘处理函数 */
  52          void Key_Proc() {
  53   1        static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  54   1        if (time_all_1s % 10) return;
C51 COMPILER V9.59.0.0   MAIN                                                              05/19/2024 20:54:51 PAGE 2   

  55   1        Key_Val = Key_Read();
  56   1        Key_Down = Key_Val & (Key_Old ^ Key_Val);
  57   1        Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  58   1        Key_Old = Key_Val;
  59   1        if (Key_Down == 4) EEPROM_Write(&int_data, 0, 2);
*** WARNING C182 IN LINE 59 OF main.c: pointer to different objects
  60   1      }
  61          /* 数码管处理函数 */
  62          void Seg_Proc() {
  63   1        if (time_all_1s % 20) return;
  64   1      }
  65          
  66          /* LED处理函数 */
  67          void Led_Proc() {}
  68          
  69          /* 串口处理函数 */
  70          void Uart_Proc() {
  71   1        if (Uart_Rx_Index == 0) return;
  72   1        // 超过10ms没有收到数据
  73   1        if (Sys_Tick >= 10) {
  74   2          Sys_Tick = Uart_flag = 0;
  75   2      
  76   2          memset(Uart_Buf, 0, Uart_Rx_Index);
  77   2          Uart_Rx_Index = 0;
  78   2        }
  79   1      }
  80          
  81          /* 定时器0中断初始化 */
  82          void Timer0_Init(void)  // 1毫秒@12.000MHz
  83          {
  84   1        AUXR &= 0x7F;  // 定时器时钟12T模式
  85   1        TMOD &= 0xF0;  // 设置定时器模式
  86   1        TL0 = 0x18;    // 设置定时初始值
  87   1        TH0 = 0xFC;    // 设置定时初始值
  88   1        TF0 = 0;       // 清除TF0标志
  89   1        TR0 = 1;       // 定时器0开始计时
  90   1        ET0 = 1;
  91   1        EA = 1;
  92   1      }
  93          
  94          /* 定时器0中断函数 */
  95          void Timer0_ISR(void) interrupt 1 {
  96   1        uchar i;
  97   1        if (++time_all_1s == 1000) time_all_1s = 0;
  98   1        if (Uart_flag) Sys_Tick++;
  99   1        Seg_Pos = (++Seg_Pos) % 8;
 100   1        Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 101   1        for (i = 0; i < 8; i++) Led_Disp(i, ucLed[i]);
 102   1      }
 103          
 104          /* 串口中断服务函数 */
 105          void Uart_ISR(void) interrupt 4 {
 106   1        if (RI == 1)  // 串口接收到数据
 107   1        {
 108   2          Uart_flag = 1;
 109   2          Sys_Tick = 0;  // 接受计时
 110   2          Uart_Buf[Uart_Rx_Index] = SBUF;
 111   2          Uart_Rx_Index++;
 112   2          RI = 0;
 113   2        }
 114   1        if (Uart_Rx_Index > 6) Uart_Rx_Index = 0;
 115   1      }
C51 COMPILER V9.59.0.0   MAIN                                                              05/19/2024 20:54:51 PAGE 3   

 116          void Delay750ms(void)  //@12.000MHz
 117          {
 118   1        unsigned char data i, j, k;
 119   1      
 120   1        _nop_();
 121   1        _nop_();
 122   1        i = 35;
 123   1        j = 51;
 124   1        k = 182;
 125   1        do {
 126   2          do {
 127   3            while (--k);
 128   3          } while (--j);
 129   2        } while (--i);
 130   1      }
 131          uchar passwd = 123;
 132          uchar input_passwd;
 133          void main() {
 134   1        System_Init();
 135   1        Timer0_Init();
 136   1        Uart1_Init();
 137   1        Set_Rtc(ucRtc);
 138   1        rd_temperature();
 139   1        Delay750ms();
 140   1        EEPROM_Read(&input_passwd, 8, 1);  // 用不会写入的地方做校验
 141   1        if (input_passwd != passwd)  // 校验失败，之前未写入数据1/256概率出问题
 142   1        {
 143   2          EEPROM_Write(&passwd, 8, 1);
 144   2        } else  // 校验通过，读取我们需要的数据
 145   1        {
 146   2          EEPROM_Read(&int_data, 0, 2);
*** WARNING C182 IN LINE 146 OF main.c: pointer to different objects
 147   2        }
 148   1      
 149   1        while (1) {
 150   2          Data_Proc();
 151   2          Key_Proc();
 152   2          Seg_Proc();
 153   2          Uart_Proc();
 154   2          Led_Proc();
 155   2        }
 156   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    502    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     84       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
