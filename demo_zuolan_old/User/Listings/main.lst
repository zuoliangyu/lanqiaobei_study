C51 COMPILER V9.59.0.0   MAIN                                                              02/17/2024 17:27:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\driver;..\user) DEBUG OBJECTEX
                    -TEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Slow_Down;                                 // 数码管减速
   7          uchar Seg_Buf[8] = {10, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   8          uchar Seg_Pos;                                       // 数码管指示
   9          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};       // 某位是否显示小数点
  10          
  11          /* 串口方面 */
  12          uchar Uart_Slow_Down;
  13          uchar Uart_Buf[20];  // 串口接收到的数据
  14          uchar Uart_Rx_Index; // 串口接收到的数据的指针
  15          
  16          /* 时间方面 */
  17          uchar ucRtc[3] = {0x13, 0x11, 0x11}; // 初始化时间13:11:11
  18          
  19          /* 键盘方面 */
  20          uchar Key_Slow_Down;
  21          /* 键盘处理函数 */
  22          void Key_Proc()
  23          {
  24   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  25   1          if (Key_Slow_Down)
  26   1              return;
  27   1          Key_Slow_Down = 1;
  28   1      
  29   1          Key_Val = Key_Read();
  30   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  31   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  32   1          Key_Old = Key_Val;
  33   1      }
  34          
  35          /* 数码管处理函数 */
  36          void Seg_Proc()
  37          {
  38   1          if (Seg_Slow_Down)
  39   1              return;
  40   1          Seg_Slow_Down = 1;
  41   1      }
  42          
  43          /* LED处理函数 */
  44          void Led_Proc()
  45          {
  46   1      }
  47          
  48          /* 串口处理函数 */
  49          void Uart_Proc()
  50          {
  51   1          if (Uart_Slow_Down)
  52   1              return;
  53   1          Uart_Slow_Down = 1;
  54   1          if (Uart_Buf[0] == 'O' && Uart_Buf[1] == 'K')
C51 COMPILER V9.59.0.0   MAIN                                                              02/17/2024 17:27:08 PAGE 2   

  55   1          {
  56   2              // 执行相关函数
  57   2      
  58   2              memset(Uart_Buf, 0, 20);
  59   2              Uart_Rx_Index = 0;
  60   2          }
  61   1      }
  62          
  63          /* 定时器0中断初始化 */
  64          void Timer0_Init(void) // 1微秒@12.000MHz
  65          {
  66   1          AUXR &= 0x7F; // 定时器时钟12T模式
  67   1          TMOD &= 0xF0; // 设置定时器模式
  68   1          TL0 = 0xFF;   // 设置定时初始值
  69   1          TH0 = 0xFF;   // 设置定时初始值
  70   1          TF0 = 0;      // 清除TF0标志
  71   1          TR0 = 1;      // 定时器0开始计时
  72   1          ET0 = 1;      // 允许定时器0中断
  73   1          EA = 1;       // 允许总中断
  74   1      }
  75          
  76          /* 定时器0中断函数 */
  77          void Timer0_ISR(void) interrupt 1
  78          {
  79   1          if (++Key_Slow_Down == 10)
  80   1              Key_Slow_Down = 0;
  81   1          if (++Seg_Slow_Down == 500)
  82   1              Seg_Slow_Down = 0;
  83   1          if (++Uart_Slow_Down == 200)
  84   1              Uart_Slow_Down = 0;
  85   1          Seg_Pos = (++Seg_Pos) % 8;
  86   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
  87   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
  88   1      }
  89          
  90          /* 串口中断服务函数 */
  91          void Uart_ISR(void) interrupt 4
  92          {
  93   1          if (RI == 1) // 串口接收到数据
  94   1          {
  95   2              Uart_Buf[Uart_Rx_Index] = SBUF;
  96   2              Uart_Rx_Index++;
  97   2              RI = 0;
  98   2          }
  99   1      }
 100          void Delay750ms(void) //@12.000MHz
 101          {
 102   1          unsigned char data i, j, k;
 103   1      
 104   1          _nop_();
 105   1          _nop_();
 106   1          i = 35;
 107   1          j = 51;
 108   1          k = 182;
 109   1          do
 110   1          {
 111   2              do
 112   2              {
 113   3                  while (--k)
 114   3                      ;
 115   3              } while (--j);
 116   2          } while (--i);
C51 COMPILER V9.59.0.0   MAIN                                                              02/17/2024 17:27:08 PAGE 3   

 117   1      }
 118          void main()
 119          {
 120   1          Timer0_Init();
 121   1          Uart1_Init();
 122   1          Set_Rtc(ucRtc);
 123   1          Delay750ms();
 124   1          rd_temperature();
 125   1          while (1)
 126   1          {
 127   2              Key_Proc();
 128   2              Seg_Proc();
 129   2              Uart_Proc();
 130   2              Led_Proc();
 131   2          }
 132   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    305    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     56    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
